import { Page, expect, test } from '@playwright/test'
import { kebabCase } from 'lodash'

const dismissToast = async (page: Page) => {
  await page.locator('#toast').getByRole('button').waitFor({ state: 'visible' })
  await page.locator('#toast').getByRole('button').click()
}

test.describe('Table Editor page', () => {
  test.setTimeout(60000)

  test.beforeEach(async ({ page }) => {
    const tableResponsePromise = page.waitForResponse(
      'http://localhost:8082/api/pg-meta/default/query?key=public-entity-types',
      { timeout: 0 }
    )
    await page.goto('/project/default/editor')
    await tableResponsePromise
  })

  test('should create a column and insert a row', async ({ page }, testInfo) => {
    // given
    const tableName = `${kebabCase(testInfo.title).slice(0, 24)}-${testInfo.retry}`

    //when
    // The page has been loaded with the table data, we can now interact with the page
    await page.getByRole('button', { name: 'New table', exact: true }).click()
    await page
      .locator('.col-span-8 > div > .relative > .peer\\/input')
      .first()
      .waitFor({ state: 'visible' })
    await page.locator('.col-span-8 > div > .relative > .peer\\/input').first().click()
    await page.locator('.col-span-8 > div > .relative > .peer\\/input').first().fill(tableName)
    await page.getByRole('button', { name: 'Add column' }).click()
    await page.getByRole('textbox', { name: 'column_name' }).click()
    await page.getByRole('textbox', { name: 'column_name' }).fill('textColumn')
    await page.getByRole('button', { name: '---' }).click()
    await page.getByText('textVariable-length character').click()
    await page.getByRole('button', { name: 'Save' }).waitFor({ state: 'visible' })
    await page.getByRole('button', { name: 'Save' }).click()
    await dismissToast(page)

    await page.getByRole('button', { name: tableName }).click()
    await page.getByTestId('table-editor-insert-new-row').click()
    await page.getByText('Insert a new row into').click()
    await page.getByPlaceholder('NULL').click()
    await page.getByPlaceholder('NULL').fill('some text')
    await page.getByTestId('action-bar-save-row').click()
    await dismissToast(page)

    // then
    await expect(page.getByRole('grid')).toContainText('some text')
  })

  test('should create a new table with one nullable field and one default field', async ({
    page,
  }, testInfo) => {
    // given
    const tableName = `${kebabCase(testInfo.title).slice(0, 24)}-${testInfo.retry}`

    //when
    // The page has been loaded with the table data, we can now interact with the page
    await page.getByRole('button', { name: 'New table', exact: true }).click()
    await page
      .locator('.col-span-8 > div > .relative > .peer\\/input')
      .first()
      .waitFor({ state: 'visible' })
    await page.locator('.col-span-8 > div > .relative > .peer\\/input').first().click()
    await page.locator('.col-span-8 > div > .relative > .peer\\/input').first().fill(tableName)

    // make the built-in created_at column nullable
    await page.locator('div:nth-child(3) > div > div > div:nth-child(7) > button').click()
    await page.getByText('Is Nullable').click()
    await page
      .locator('div:nth-child(3) > div > div > div:nth-child(7) > button')
      .click({ force: true })

    // add a new column and add default value
    // await page.getByRole('button', { name: 'Add column' }).scrollIntoViewIfNeeded()
    await page.getByRole('button', { name: 'Add column' }).click()
    await page.getByRole('textbox', { name: 'column_name' }).click()
    await page.getByRole('textbox', { name: 'column_name' }).fill('defaultValueColumn')
    await page.getByRole('button', { name: '---' }).click()
    await page.getByText('Signed two-byte integer').click()
    await page.getByPlaceholder('NULL').nth(2).click()
    await page.getByPlaceholder('NULL').nth(2).fill('2')

    await page.getByRole('button', { name: 'Save' }).waitFor({ state: 'visible' })
    await page.getByRole('button', { name: 'Save' }).click()
    await dismissToast(page)

    // then
    await page.getByText('definition').click()
    await expect(page.locator('div.view-lines')).toContainText(
      `CREATE  TABLE public.${tableName} (  id bigint GENERATED BY DEFAULT AS IDENTITY ,  created_at timestamp with time zone NULL DEFAULT now(),  \"defaultValueColumn\" smallint NULL DEFAULT '2'::smallint,  CONSTRAINT ${tableName}_pkey PRIMARY KEY (id)) TABLESPACE pg_default;`
    )
  })

  test.fixme('should insert a row into a new table', () => {})
  test.fixme('should filter a table by a column', () => {})
  test.fixme('should sort a table by a column', () => {})
  test.fixme('should add a new column to a table', () => {})

  test.fixme('should view a table definition', async ({ page }, testInfo) => {})
  test.fixme('should check the auth schema', () => {})
})

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/partners/flyio/callback': {
    /** Redirects to Supabase dashboard after completing Fly sso */
    get: operations['CallbackController_redirectToDashboardFlyioExtensionScreen']
  }
  '/partners/flyio/extensions': {
    /** Creates a database */
    post: operations['FlyExtensionsController_provisionResource']
  }
  '/partners/flyio/extensions/{extension_id}': {
    /** Gets database status */
    get: operations['ExtensionController_getResourceStatus']
    /** Deletes a database */
    delete: operations['ExtensionController_deleteResource']
  }
  '/partners/flyio/extensions/{extension_id}/sso': {
    /** Starts Fly single sign on */
    get: operations['ExtensionController_startFlyioSSO']
  }
  '/partners/flyio/extensions/eligibility': {
    /** Checks database provisioning eligibility */
    post: operations['FlyExtensionsController_checkEligibility']
  }
  '/partners/flyio/organizations/{organization_id}': {
    /** Gets details of the organization linked to the provided Fly organization id */
    get: operations['FlyOrganizationsController_getOrganization']
  }
  '/partners/flyio/organizations/{organization_id}/extensions': {
    /** Gets all databases that belong to the given Fly organization id */
    get: operations['FlyOrganizationsController_getOrgExtensions']
  }
  '/partners/flyio/organizations/{organization_id}/sso': {
    /** Starts Fly single sign on */
    get: operations['FlyOrganizationsController_startFlyioSSO']
  }
  '/partners/flyio/organizations/{organization_id}/subscription': {
    /** Updates organization subscription linked to the provided Fly organization id */
    put: operations['FlyOrganizationsController_updateOrganization']
  }
  '/partners/vercel/callback': {
    /** Redirects to Supabase dashboard after completing Vercel sso flow */
    get: operations['CallbackController_redirectToDashboardVercelExtensionScreen']
  }
  '/partners/vercel/v1/installations/{installation_id}': {
    /** Gets the set of billing plans available to a specific Installation */
    get: operations['InstallationsController_getInstallation']
    /** Upserts an installation for the account with installation_id */
    put: operations['InstallationsController_createInstallation']
    /** Deletes the installation with provided installation_id */
    delete: operations['InstallationsController_deleteInstallation']
    /** Updates an installation for the account with installation_id */
    patch: operations['InstallationsController_updateInstallation']
  }
  '/partners/vercel/v1/installations/{installation_id}/plans': {
    /** Gets the set of billing plans available to a specific Installation */
    get: operations['InstallationsController_getInstallationBillingPlans']
  }
  '/partners/vercel/v1/installations/{installation_id}/resources': {
    /** Lists all resources */
    get: operations['ResourcesController_listResources']
    /** Provisions a resource */
    post: operations['ResourcesController_createResource']
  }
  '/partners/vercel/v1/installations/{installation_id}/resources/{resource_id}': {
    /** Fetches a resource by resource_id */
    get: operations['ResourcesController_getResource']
    /** Uninstalls and de-provisions a resource */
    delete: operations['ResourcesController_deleteResource']
    /** Updates a resource */
    patch: operations['ResourcesController_updateResource']
  }
  '/partners/vercel/v1/installations/{installation_id}/resources/{resource_id}/plans': {
    /** Returns the set of billing plans available to a specific resource */
    get: operations['ResourcesController_getResourcePlans']
  }
  '/partners/vercel/v1/products/{product_id}/plans': {
    /** Return quotes for different billing plans for a specific product */
    get: operations['ProductsController_listResources']
  }
  '/platform/auth/{ref}/config': {
    /** Gets GoTrue config */
    get: operations['GoTrueConfigController_getGoTrueConfig']
    /** Updates GoTrue config */
    patch: operations['GoTrueConfigController_updateGoTrueConfig']
  }
  '/platform/auth/{ref}/config/hooks': {
    /** Updates GoTrue config hooks */
    patch: operations['GoTrueConfigController_updateGoTrueConfigHooks']
  }
  '/platform/auth/{ref}/invite': {
    /** Sends an invite to the given email */
    post: operations['AuthInviteController_sendInvite']
  }
  '/platform/auth/{ref}/magiclink': {
    /** Sends a magic link to the given email */
    post: operations['MagicLinkController_sendMagicLink']
  }
  '/platform/auth/{ref}/otp': {
    /** Sends an OTP to the given phone number */
    post: operations['OtpController_sendOtp']
  }
  '/platform/auth/{ref}/recover': {
    /** Sends a recovery email to the given email */
    post: operations['RecoverController_sendRecover']
  }
  '/platform/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['TemplateController_getTemplate']
  }
  '/platform/auth/{ref}/users': {
    /**
     * Gets users
     * @deprecated
     */
    get: operations['UsersController_getUsers']
    /** Creates user */
    post: operations['UsersController_createUser']
    /**
     * Delete user with given ID
     * @deprecated
     */
    delete: operations['UsersController_deleteUser']
  }
  '/platform/auth/{ref}/users/{id}': {
    /** Delete user with given ID */
    delete: operations['UsersController_deleteUserById']
    /** Updates user with given ID */
    patch: operations['UsersController_updateUserById']
  }
  '/platform/auth/{ref}/users/{id}/factors': {
    /** Delete all factors associated to a user */
    delete: operations['FactorsController_deleteFactors']
  }
  '/platform/cli/login': {
    /** Create CLI login session */
    post: operations['CliLoginController_createCliLoginSession']
  }
  '/platform/cli/login/{session_id}': {
    /** Retrieve CLI login session */
    get: operations['CliLoginController_getCliLoginSession']
  }
  '/platform/database/{ref}/backups': {
    /** Gets project backups */
    get: operations['BackupsController_getBackups']
  }
  '/platform/database/{ref}/backups/download': {
    /** Download project backup */
    post: operations['BackupsController_downloadBackup']
  }
  '/platform/database/{ref}/backups/downloadable-backups': {
    /** Gets backups that might be downloadable, but potentially not restorable. */
    get: operations['BackupsController_getDownloadableBackups']
  }
  '/platform/database/{ref}/backups/enable-physical-backups': {
    /** Enable usage of physical backups */
    post: operations['BackupsController_enablePhysicalBackup']
  }
  '/platform/database/{ref}/backups/pitr': {
    /** Restore project to a previous point in time */
    post: operations['BackupsController_restorePointInTimeBackup']
  }
  '/platform/database/{ref}/backups/restore': {
    /** Restore project backup */
    post: operations['BackupsController_restoreBackup']
  }
  '/platform/database/{ref}/backups/restore-physical': {
    /** Restore project with a physical backup */
    post: operations['BackupsController_restorePhysicalBackup']
  }
  '/platform/database/{ref}/hook-enable': {
    /** Enables Database Webhooks on the project */
    post: operations['HooksController_enableHooks']
  }
  '/platform/database/{ref}/hook-logs': {
    /** Gets hook logs with the given ID */
    get: operations['HooksController_getHookLogs']
  }
  '/platform/feedback/docs': {
    /** Send feedback on docs */
    post: operations['SendDocsFeedbackController_sendDocsFeedback']
  }
  '/platform/feedback/downgrade': {
    /** Send exit survey to HubSpot */
    post: operations['SendExitSurveyController_sendExitSurvey']
  }
  '/platform/feedback/send': {
    /** Send feedback */
    post: operations['SendFeedbackController_sendFeedback']
  }
  '/platform/feedback/upgrade': {
    /** Send upgrade survey to survey_responses table */
    post: operations['SendUpgradeSurveyController_sendUpgradeSurvey']
  }
  '/platform/integrations': {
    /** Gets user's integrations */
    get: operations['IntegrationsController_getUserInstallations']
  }
  '/platform/integrations/{slug}': {
    /** Gets integration with the given organization slug */
    get: operations['IntegrationsController_getUserInstallationForOrg']
  }
  '/platform/integrations/github/authorization': {
    /** Get GitHub authorization */
    get: operations['GitHubAuthorizationsController_getGitHubAuthorization']
    /** Create GitHub authorization */
    post: operations['GitHubAuthorizationsController_createGitHubAuthorization']
  }
  '/platform/integrations/github/branches/{connectionId}': {
    /** List GitHub connection branches */
    get: operations['GitHubBranchesController_listConnectionBranches']
  }
  '/platform/integrations/github/branches/{connectionId}/{branchName}': {
    /** Get GitHub connection branch */
    get: operations['GitHubBranchesController_getConnectionBranch']
  }
  '/platform/integrations/github/connections': {
    /** List organization GitHub connections */
    get: operations['GitHubConnectionsController_listOrganizationGitHubConnections']
    /** Connects a GitHub project to a supabase project */
    post: operations['GitHubConnectionsController_createGitHubConnection']
  }
  '/platform/integrations/github/connections/{connection_id}': {
    /** Deletes github project connection */
    delete: operations['GitHubConnectionsController_deleteGitHubConnection']
    /** Updates a GitHub connection for a supabase project */
    patch: operations['GitHubConnectionsController_updateGitHubConnection']
  }
  '/platform/integrations/github/repositories': {
    /** Gets GitHub repositories for user */
    get: operations['GitHubRepositoriesController_listRepositories']
  }
  '/platform/integrations/vercel': {
    /**
     * Create vercel integration
     * @description Exchanges a vercel code for an access token and saves the access token to the new integration record
     */
    post: operations['VercelIntegrationController_createVercelIntegration']
  }
  '/platform/integrations/vercel/{organization_integration_id}': {
    /** Removes Vercel organization integration with the given id */
    delete: operations['VercelIntegrationController_removeVercelIntegration']
  }
  '/platform/integrations/vercel/connections': {
    /** Connects a Vercel project to a supabase project */
    post: operations['VercelConnectionsController_createVercelConnection']
  }
  '/platform/integrations/vercel/connections/{connection_id}': {
    /** Deletes vercel project connection */
    delete: operations['VercelConnectionsController_deleteVercelConnection']
    /** Updates a Vercel connection for a supabase project */
    patch: operations['VercelConnectionsController_updateVercelConnection']
  }
  '/platform/integrations/vercel/connections/{connection_id}/sync-envs': {
    /** Syncs supabase project envs with given connection id */
    post: operations['VercelConnectionsController_syncVercelConnectionEnvironments']
  }
  '/platform/integrations/vercel/connections/{organization_integration_id}': {
    /** Gets installed vercel project connections for the given organization integration */
    get: operations['VercelConnectionsController_getVercelConnections']
  }
  '/platform/integrations/vercel/projects/{organization_integration_id}': {
    /** Gets vercel projects with the given organization integration id */
    get: operations['VercelProjectController_getVercelProjects']
  }
  '/platform/notifications': {
    /** Get notifications */
    get: operations['NotificationsController_getNotificationsV2']
    /** Delete notifications */
    delete: operations['NotificationsController_deleteNotifications']
    /** Update notifications */
    patch: operations['NotificationsController_updateNotificationsV2']
  }
  '/platform/notifications/archive-all': {
    /** Archives all notifications */
    patch: operations['NotificationsController_archiveAllNotifications']
  }
  '/platform/notifications/summary': {
    /** Get an aggregated data of interest across all notifications for the user */
    get: operations['NotificationsController_getNotificationsSummary']
  }
  '/platform/oauth/authorizations/{id}': {
    /** [Beta] Get oauth app authorization request */
    get: operations['OAuthAuthorizationsController_getAuthorizationRequest']
  }
  '/platform/organizations': {
    /** Gets user's organizations */
    get: operations['OrganizationsController_getOrganizations']
    /** Creates an organization */
    post: operations['OrganizationsController_createOrganizationWithTier']
  }
  '/platform/organizations/{slug}': {
    /** Deletes organization */
    delete: operations['OrganizationSlugController_deleteOrganization']
    /** Updates organization */
    patch: operations['OrganizationSlugController_updateOrganization']
  }
  '/platform/organizations/{slug}/audit': {
    /** Gets an organization's audit logs */
    get: operations['OrgAuditLogsController_getAuditLogs']
  }
  '/platform/organizations/{slug}/available-versions': {
    /** Retrieves a list of available Postgres versions available to the organization */
    post: operations['OrganizationSlugController_getAvailableImageVersions']
  }
  '/platform/organizations/{slug}/billing/invoices': {
    /** Gets invoices for the given organization */
    get: operations['OrgInvoicesController_getInvoices']
    /** Gets the total count of invoices for the given organization */
    head: operations['OrgInvoicesController_countInvoices']
  }
  '/platform/organizations/{slug}/billing/invoices/{invoiceId}': {
    /** Gets invoice with the given invoice ID */
    get: operations['OrgInvoicesController_getInvoice']
  }
  '/platform/organizations/{slug}/billing/invoices/upcoming': {
    /** Gets the upcoming invoice */
    get: operations['OrgInvoicesController_getUpcomingInvoice']
  }
  '/platform/organizations/{slug}/billing/plans': {
    /** Gets subscription Plans */
    get: operations['OrgPlansController_getAvailablePlans']
  }
  '/platform/organizations/{slug}/billing/subscription': {
    /** Gets the current subscription */
    get: operations['SubscriptionController_getSubscription']
    /** Updates subscription */
    put: operations['SubscriptionController_updateSubscription']
  }
  '/platform/organizations/{slug}/billing/subscription/preview': {
    /** Preview subscription changes */
    post: operations['SubscriptionController_previewSubscriptionChange']
  }
  '/platform/organizations/{slug}/customer': {
    /** Gets the Stripe customer */
    get: operations['CustomerController_getCustomer']
    /** Updates the billing customer */
    put: operations['updateCustomerV2']
  }
  '/platform/organizations/{slug}/daily-stats': {
    /** Gets daily organization stats */
    get: operations['OrgDailyStatsController_getDailyStats']
  }
  '/platform/organizations/{slug}/daily-stats/compute': {
    /** Gets daily organization stats for compute */
    get: operations['OrgDailyStatsController_getDailyStatsCompute']
  }
  '/platform/organizations/{slug}/documents/soc2-type-2-report': {
    /** Get SOC2 Type 2 report URL */
    get: operations['OrgDocumentsController_getSoc2Type2ReportUrl']
  }
  '/platform/organizations/{slug}/documents/standard-security-questionnaire': {
    /** Get standard security questionnaire URL */
    get: operations['OrgDocumentsController_getStandardSecurityQuestionnaireUrl']
  }
  '/platform/organizations/{slug}/members': {
    /** Gets organization's members */
    get: operations['MembersController_getMembers']
  }
  '/platform/organizations/{slug}/members/{gotrue_id}': {
    /** Removes organization member */
    delete: operations['MembersController_deleteMember']
    /** Assign organization member with new role */
    patch: operations['MembersController_assignMemberRoleV2']
  }
  '/platform/organizations/{slug}/members/{gotrue_id}/roles/{role_id}': {
    /** Update organization member role */
    put: operations['MembersController_UpdateMemberRole']
    /** Removes organization member role */
    delete: operations['MembersController_deleteMemberRole']
  }
  '/platform/organizations/{slug}/members/invitations': {
    /** Gets organization invitations */
    get: operations['InvitationsController_getAllInvitations']
    /** Creates organization invitation */
    post: operations['InvitationsController_createInvitation']
  }
  '/platform/organizations/{slug}/members/invitations/{id}': {
    /** Deletes organization invitation with given id */
    delete: operations['InvitationsController_deleteInvitation']
  }
  '/platform/organizations/{slug}/members/invitations/{token}': {
    /** Gets organization invitation by token */
    get: operations['InvitationsController_getInvitationByToken']
    /** Accepts organization invitation by token */
    post: operations['InvitationsController_acceptInvitationByToken']
  }
  '/platform/organizations/{slug}/members/invite': {
    /**
     * Gets invited users
     * @deprecated
     */
    get: operations['OrganizationInviteController_getInvitedUsers']
    /**
     * Invites user
     * @deprecated
     */
    post: operations['OrganizationInviteController_inviteUser']
    /**
     * Delete invited user
     * @deprecated
     */
    delete: operations['OrganizationInviteController_deleteInvitedUser']
  }
  '/platform/organizations/{slug}/members/join': {
    /**
     * Gets invite
     * @deprecated
     */
    get: operations['JoinController_getInvite']
    /**
     * Joins organization
     * @deprecated
     */
    post: operations['JoinController_joinOrganization']
  }
  '/platform/organizations/{slug}/members/reached-free-project-limit': {
    /** Gets organization members who have reached their free project limit */
    get: operations['ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit']
  }
  '/platform/organizations/{slug}/oauth/apps': {
    /** List published or authorized oauth apps */
    get: operations['OAuthAppsController_listOAuthApps']
    /** Create an oauth app */
    post: operations['OAuthAppsController_createOAuthApp']
  }
  '/platform/organizations/{slug}/oauth/apps/{id}': {
    /** Update an oauth app */
    put: operations['OAuthAppsController_updateOAuthApp']
    /** Remove a published oauth app */
    delete: operations['OAuthAppsController_removeOAuthApp']
  }
  '/platform/organizations/{slug}/oauth/apps/{id}/revoke': {
    /** Revoke an authorized oauth app */
    post: operations['OAuthAppsController_revokeAuthorizedOAuthApp']
  }
  '/platform/organizations/{slug}/oauth/authorizations/{id}': {
    /** [Beta] Approve oauth app authorization request */
    post: operations['OrganizationOAuthAuthorizationsController_approveAuthorizationRequest']
    /** [Beta] Decline oauth app authorization request */
    delete: operations['OrganizationOAuthAuthorizationsController_declineAuthorizationRequest']
  }
  '/platform/organizations/{slug}/payments': {
    /** Gets Stripe payment methods for the given organization */
    get: operations['getPaymentMethodsV2']
    /** Detach payment method with the given card ID */
    delete: operations['PaymentsController_detachPaymentMethod']
  }
  '/platform/organizations/{slug}/payments/default': {
    /** Mark given payment method as default for organization */
    put: operations['PaymentsController_markPaymentMethodAsDefault']
  }
  '/platform/organizations/{slug}/payments/setup-intent': {
    /** Sets up a payment method */
    post: operations['SetupIntentOrgController_setUpPaymentMethod']
  }
  '/platform/organizations/{slug}/projects': {
    /** Gets all projects for the given organization */
    get: operations['OrganizationProjectsController_getProjects']
  }
  '/platform/organizations/{slug}/roles': {
    /** Gets the given organization's roles */
    get: operations['OrganizationRolesController_getAllRolesV2']
  }
  '/platform/organizations/{slug}/tax-ids': {
    /** Gets the given organization's tax ID */
    get: operations['TaxIdsController_getTaxId']
    /** Creates or updates a tax ID for the given organization */
    put: operations['TaxIdsController_updateTaxId']
    /** Delete the tax ID with the given ID */
    delete: operations['TaxIdsController_deleteTaxId']
  }
  '/platform/organizations/{slug}/transfer': {
    /** Transfers the organization to the given member */
    post: operations['TransferController_transferOrganization']
  }
  '/platform/organizations/{slug}/usage': {
    /** Gets usage stats */
    get: operations['OrgUsageController_getOrgUsage']
  }
  '/platform/organizations/fly/{fly_organization_id}': {
    /** Gets organization linked to fly organization id */
    get: operations['OrganizationsController_getOrganizationByFlyOrganizationId']
  }
  '/platform/pg-meta/{ref}/column-privileges': {
    /** Retrieve column privileges */
    get: operations['ColumnPrivilegesController_getColumnPrivileges']
    /** Grant column privileges */
    post: operations['ColumnPrivilegesController_grantColumnPrivileges']
    /** Revoke column privileges */
    delete: operations['ColumnPrivilegesController_revokeColumnPrivileges']
  }
  '/platform/pg-meta/{ref}/columns': {
    /** Gets project pg.columns */
    get: operations['ColumnsController_getColumns']
    /** Creates project pg.column */
    post: operations['ColumnsController_createColumn']
    /** Deletes project pg.column with the given ID */
    delete: operations['ColumnsController_deleteColumn']
    /** Updates project pg.column with the given ID */
    patch: operations['ColumnsController_updateColumn']
  }
  '/platform/pg-meta/{ref}/extensions': {
    /** Gets project pg.extensions */
    get: operations['ExtensionsController_getExtensions']
    /** Creates project pg.extension */
    post: operations['ExtensionsController_createExtension']
    /** Deletes project pg.extension with the given ID */
    delete: operations['ExtensionsController_deleteExtension']
  }
  '/platform/pg-meta/{ref}/foreign-tables': {
    /** Retrieve database foreign tables */
    get: operations['ForeignTablesController_getForeignTables']
  }
  '/platform/pg-meta/{ref}/functions': {
    /** Gets project pg.functions */
    get: operations['FunctionsController_getFunctions']
    /** Creates project pg.function */
    post: operations['FunctionsController_createFunction']
    /** Deletes project pg.function with the given ID */
    delete: operations['FunctionsController_deleteFunction']
    /** Updates project pg.function with the given ID */
    patch: operations['FunctionsController_updateFunction']
  }
  '/platform/pg-meta/{ref}/materialized-views': {
    /** Retrieve database materialized views */
    get: operations['MaterializedViewsController_getMaterializedViews']
  }
  '/platform/pg-meta/{ref}/policies': {
    /** Gets project pg.policies */
    get: operations['PoliciesController_getPolicies']
    /** Creates project pg.policy */
    post: operations['PoliciesController_createPolicy']
    /** Deletes project pg.policy with the given ID */
    delete: operations['PoliciesController_deletePolicy']
    /** Updates project pg.policy with the given ID */
    patch: operations['PoliciesController_updatePolicy']
  }
  '/platform/pg-meta/{ref}/publications': {
    /** Gets project pg.publications */
    get: operations['PublicationsController_getPublications']
    /** Gets project pg.publications */
    post: operations['PublicationsController_createPublication']
    /** Deletes project pg.publication with the given ID */
    delete: operations['PublicationsController_deletePublication']
    /** Updates project pg.publication with the given ID */
    patch: operations['PublicationsController_updatePublication']
  }
  '/platform/pg-meta/{ref}/query': {
    /** Run sql query */
    post: operations['QueryController_runQuery']
  }
  '/platform/pg-meta/{ref}/query/format': {
    /** Format sql query */
    post: operations['QueryController_formatQuery']
  }
  '/platform/pg-meta/{ref}/query/validate': {
    /** Validate sql query */
    post: operations['QueryController_validateQuery']
  }
  '/platform/pg-meta/{ref}/roles': {
    /** Gets project pg.roles */
    get: operations['RolesController_getRoles']
    /** Creates project pg.role */
    post: operations['RolesController_createRole']
    /** Deletes project pg.role with the given ID */
    delete: operations['RolesController_deleteRole']
    /** Updates project pg.role with the given ID */
    patch: operations['RolesController_updateRole']
  }
  '/platform/pg-meta/{ref}/schemas': {
    /** Gets project pg.schemas */
    get: operations['SchemasController_getSchemas']
    /** Creates project pg.schema */
    post: operations['SchemasController_createSchema']
    /** Deletes project pg.schema with the given ID */
    delete: operations['SchemasController_deleteSchema']
    /** Updates project pg.schema with the given ID */
    patch: operations['SchemasController_updateSchema']
  }
  '/platform/pg-meta/{ref}/search/columns': {
    /** Searches project pg.columns. Return maximum 50 results. */
    post: operations['SearchController_searchColumns']
  }
  '/platform/pg-meta/{ref}/search/tables': {
    /** Searches project pg.tables. Return maximum 50 results. */
    post: operations['SearchController_searchTables']
  }
  '/platform/pg-meta/{ref}/table-privileges': {
    /** Retrieve table privileges */
    get: operations['TablePrivilegesController_getTablePrivileges']
    /** Grant table privileges */
    post: operations['TablePrivilegesController_grantTablePrivileges']
    /** Revoke table privileges */
    delete: operations['TablePrivilegesController_revokeTablePrivileges']
  }
  '/platform/pg-meta/{ref}/tables': {
    /** Gets project pg.tables or pg.table with the given ID */
    get: operations['TablesController_getTables']
    /** Creates project pg.table */
    post: operations['TablesController_createTable']
    /** Deletes project pg.table with the given ID */
    delete: operations['TablesController_deleteTable']
    /** Updates project pg.table with the given ID */
    patch: operations['TablesController_updateTable']
  }
  '/platform/pg-meta/{ref}/triggers': {
    /** Gets project pg.triggers */
    get: operations['TriggersController_getTriggers']
    /** Creates project pg.trigger */
    post: operations['TriggersController_createTrigger']
    /** Deletes project pg.trigger with the given ID */
    delete: operations['TriggersController_deleteTrigger']
    /** Updates project pg.trigger with the given ID */
    patch: operations['TriggersController_updateTrigger']
  }
  '/platform/pg-meta/{ref}/types': {
    /** Gets project pg.types */
    get: operations['TypesController_getTypes']
  }
  '/platform/pg-meta/{ref}/views': {
    /** Retrieve database views */
    get: operations['ViewsController_getViews']
  }
  '/platform/profile': {
    /** Gets the user's profile */
    get: operations['ProfileController_getProfile']
    /** Creates user's profile */
    post: operations['ProfileController_createProfile']
    /** Deletes user's profile */
    delete: operations['ProfileController_deleteProfile']
    /** Updates user's profile */
    patch: operations['ProfileController_updateProfile']
  }
  '/platform/profile/access-tokens': {
    /** Gets the user's access tokens */
    get: operations['AccessTokensController_getAccessTokens']
    /** Creates a new access token */
    post: operations['AccessTokensController_createAccessToken']
  }
  '/platform/profile/access-tokens/{id}': {
    /** Gets the access token with the given ID */
    get: operations['AccessTokensController_getAccessToken']
    /** Deletes the access token with the given ID */
    delete: operations['AccessTokensController_deleteAccessToken']
  }
  '/platform/profile/audit': {
    /** Gets a user's audit logs */
    get: operations['UserAuditLogsController_getAuditLogs']
  }
  '/platform/profile/password-check': {
    /** Check password strength */
    post: operations['PasswordCheckController_checkPassword']
  }
  '/platform/profile/permissions': {
    /** Gets all the user's permissions */
    get: operations['PermissionsController_getPermissions']
  }
  '/platform/profile/search': {
    /** Search profiles by username, email with the given keywords */
    post: operations['SearchProfileController_searchProfile']
  }
  '/platform/profile/subscriptions': {
    /** Gets the user's subscription statistics */
    get: operations['SubscriptionsController_getSubscriptionsStatistics']
  }
  '/platform/projects': {
    /**
     * Gets all projects that belong to the authenticated user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsController_getProjects']
    /** Creates a project */
    post: operations['ProjectsController_createProject']
  }
  '/platform/projects-resource-warnings': {
    /**
     * Gets resource warnings for all projects accessible by the user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsResourceWarningsController_getProjectsResourceWarnings']
  }
  '/platform/projects/{ref}': {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['ProjectsRefController_getProject']
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
    /** Updates the given project */
    patch: operations['ProjectsRefController_updateProject']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.inv-stats': {
    /** Gets a project's function invocation statistics */
    get: operations['FunctionInvocationLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.req-stats': {
    /** Gets a project's function request statistics */
    get: operations['FunctionRequestLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.resource-usage': {
    /** Gets a project's function resource usage */
    get: operations['FunctionResourceLogsController_getStatus']
  }
  '/platform/projects/{ref}/analytics/endpoints/logs.all': {
    /** Gets project's logs */
    get: operations['LogsController_getApiPaths']
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-counts': {
    /** Gets project's usage api counts */
    get: operations['UsageApiController_getApiCounts']
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-requests-count': {
    /** Gets project's usage api requests count */
    get: operations['UsageApiController_getApiRequestsCount']
  }
  '/platform/projects/{ref}/analytics/log-drains': {
    /** Lists all log drains */
    get: operations['LogDrainController_listLogDrains']
    /** Create a log drain */
    post: operations['LogDrainController_createLogDrain']
  }
  '/platform/projects/{ref}/analytics/log-drains/{token}': {
    /** Update a log drain */
    put: operations['LogDrainController_updateLogDrain']
    /** Delete a log drain */
    delete: operations['LogDrainController_deleteLogDrain']
  }
  '/platform/projects/{ref}/analytics/warehouse/access-tokens': {
    /** Lists project's warehouse access tokens from logflare */
    get: operations['v1-list-all-warehouse-tokens']
    /** Create a warehouse access token */
    post: operations['v1-create-a-warehouse-token']
  }
  '/platform/projects/{ref}/analytics/warehouse/access-tokens/{token}': {
    /** Delete a warehouse access token */
    delete: operations['v1-delete-a-warehouse-token']
  }
  '/platform/projects/{ref}/analytics/warehouse/collections': {
    /** Lists project's warehouse collections from logflare */
    get: operations['v1-list-all-warehouse-collections']
    /** Create a warehouse collection */
    post: operations['v1-create-a-warehouse-collection']
  }
  '/platform/projects/{ref}/analytics/warehouse/collections/{token}': {
    /** Get a warehouse collection */
    get: operations['v1-get-a-warehouse-collection']
    /** Delete a warehouse collection */
    delete: operations['v1-delete-a-warehouse-collection']
    /** Update a warehouse collection */
    patch: operations['v1-update-a-warehouse-collection']
  }
  '/platform/projects/{ref}/analytics/warehouse/endpoints': {
    /** Lists project's warehouse endpoints from logflare */
    get: operations['v1-list-all-warehouse-endpoints']
    /** Create a warehouse endpoint */
    post: operations['v1-create-a-warehouse-endpoint']
  }
  '/platform/projects/{ref}/analytics/warehouse/endpoints/{token}': {
    /** Update a warehouse endpoint */
    put: operations['v1-update-a-warehouse-endpoint']
    /** Delete a warehouse endpoint */
    delete: operations['v1-delete-a-warehouse-endpoint']
  }
  '/platform/projects/{ref}/analytics/warehouse/query': {
    /** Lists project's warehouse queries from logflare */
    get: operations['v1-list-all-warehouse-queries']
  }
  '/platform/projects/{ref}/analytics/warehouse/query/parse': {
    /** Parses a warehouse query */
    get: operations['v1-parse-warehouse-query']
  }
  '/platform/projects/{ref}/analytics/warehouse/tenant': {
    /** Gets project's warehouse tenant from logflare */
    get: operations['v1-provision-a-warehouse-tenant']
  }
  '/platform/projects/{ref}/api/graphql': {
    /** Queries project Graphql */
    post: operations['ProjectsApiController_projectGraphql']
  }
  '/platform/projects/{ref}/api/rest': {
    /** Gets project OpenApi */
    get: operations['ProjectsApiController_projectOpenApi']
  }
  '/platform/projects/{ref}/billing/addons': {
    /** Gets project addons */
    get: operations['ProjectAddonController_getProjectAddons']
    /** Updates project addon */
    post: operations['ProjectAddonController_updateAddon']
  }
  '/platform/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['ProjectAddonController_removeAddon']
  }
  '/platform/projects/{ref}/config/pgbouncer': {
    /** Gets project's pgbouncer config */
    get: operations['PgbouncerConfigController_getPgbouncerConfig']
    /** Updates project's pgbouncer config */
    patch: operations['PgbouncerConfigController_updatePgbouncerConfig']
  }
  '/platform/projects/{ref}/config/pgbouncer/status': {
    /** Gets project's pgbouncer status */
    get: operations['PgbouncerConfigController_getPgbouncerStatus']
  }
  '/platform/projects/{ref}/config/postgres': {
    /** Gets project's Postgres config */
    get: operations['v1-get-postgres-config']
    /** Updates project's Postgres config */
    put: operations['v1-update-postgres-config']
  }
  '/platform/projects/{ref}/config/postgrest': {
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
  }
  '/platform/projects/{ref}/config/secrets': {
    /** Updates project's secrets config */
    patch: operations['SecretsConfigController_updateConfig']
  }
  '/platform/projects/{ref}/config/storage': {
    /** Gets project's storage config */
    get: operations['StorageConfigController_getConfig']
    /** Updates project's storage config */
    patch: operations['StorageConfigController_updateConfig']
  }
  '/platform/projects/{ref}/config/supavisor': {
    /** Gets project's supavisor config */
    get: operations['v1-get-supavisor-config']
    /** Updates project's supavisor config */
    patch: operations['v1-update-supavisor-config']
  }
  '/platform/projects/{ref}/content': {
    /**
     * Gets project's content
     * @deprecated
     */
    get: operations['ContentController_getContent']
    /** Updates project's content */
    put: operations['ContentController_updateWholeContentV2']
    /** Creates project's content */
    post: operations['ContentController_createContentV2']
    /** Deletes project's contents */
    delete: operations['ContentController_deleteContents']
    /**
     * Updates project's content
     * @deprecated
     */
    patch: operations['ContentController_updateContent']
  }
  '/platform/projects/{ref}/content/count': {
    /** Gets the count of a user's content by type */
    get: operations['ContentController_getContentCount']
  }
  '/platform/projects/{ref}/content/folders': {
    /** Gets project's content root folder */
    get: operations['ContentFoldersController_getRootFolder']
    /** Creates project's content folder */
    post: operations['ContentFoldersController_createFolder']
    /** Deletes project's content folders */
    delete: operations['ContentFoldersController_DeleteFolder']
  }
  '/platform/projects/{ref}/content/folders/{id}': {
    /** Gets project's content folder */
    get: operations['ContentFoldersController_getFolder']
    /** Updates project's content folder */
    patch: operations['ContentFoldersController_updateFolder']
  }
  '/platform/projects/{ref}/content/item/{id}': {
    /** Gets project's content by the given id */
    get: operations['ContentController_getContentById']
  }
  '/platform/projects/{ref}/daily-stats': {
    /** Gets daily project stats */
    get: operations['DailyStatsController_getDailyStats']
  }
  '/platform/projects/{ref}/databases': {
    /** Gets non-removed databases of a specified project */
    get: operations['DatabasesController_getDatabases']
  }
  '/platform/projects/{ref}/databases-statuses': {
    /** Gets statuses of databases within a project */
    get: operations['DatabasesStatusesController_getStatus']
  }
  '/platform/projects/{ref}/db-password': {
    /** Updates the database password */
    patch: operations['DbPasswordController_updatePassword']
  }
  '/platform/projects/{ref}/disk': {
    /** Get database disk attributes */
    get: operations['DiskController_getDisk']
    /** Modify database disk */
    post: operations['DiskController_modifyDisk']
  }
  '/platform/projects/{ref}/disk/util': {
    /** Get disk utilization */
    get: operations['DiskController_getDiskUtilization']
  }
  '/platform/projects/{ref}/infra-monitoring': {
    /** Gets project's usage metrics */
    get: operations['InfraMonitoringController_getUsageMetrics']
  }
  '/platform/projects/{ref}/live': {
    /** Gets project health check */
    get: operations['HealthCheckController_projectHealthCheck']
  }
  '/platform/projects/{ref}/load-balancers': {
    /** Gets non-removed databases of a specified project */
    get: operations['LoadBalancersController_getLoadBalancers']
  }
  '/platform/projects/{ref}/pause': {
    /** Pauses the project */
    post: operations['PauseController_pauseProject']
  }
  '/platform/projects/{ref}/pause/status': {
    /** Gets the latest pause event for a project if a project is paused */
    get: operations['PauseController_getProject']
  }
  '/platform/projects/{ref}/resize': {
    /** Resize database disk */
    post: operations['ResizeController_resizeDatabase']
  }
  '/platform/projects/{ref}/restart': {
    /** Restarts project */
    post: operations['RestartController_restartProject']
  }
  '/platform/projects/{ref}/restart-services': {
    /** Restarts given services */
    post: operations['RestartServicesController_restartServices']
  }
  '/platform/projects/{ref}/restore': {
    /** Unpauses project */
    post: operations['UnpauseController_unpauseProject']
  }
  '/platform/projects/{ref}/restore/cancel': {
    /** Cancels a failed restoration */
    post: operations['UnpauseController_cancelProjectRestoration']
  }
  '/platform/projects/{ref}/restore/versions': {
    /** Retrieves versions to which a project can be restored */
    get: operations['UnpauseController_getAvailableImageVersions']
  }
  '/platform/projects/{ref}/run-lints': {
    /** Run project lints */
    get: operations['ProjectRunLintsController_runProjectLints']
  }
  '/platform/projects/{ref}/settings': {
    /** Gets project's settings */
    get: operations['SettingsController_getProjectApi']
  }
  '/platform/projects/{ref}/status': {
    /** Gets project's status */
    get: operations['ProjectStatusController_getStatus']
  }
  '/platform/projects/{ref}/transfer': {
    /** Transfers a project to a different organization. */
    post: operations['ProjectTransferController_transferProject']
  }
  '/platform/projects/{ref}/transfer/preview': {
    /** Previews transfering a project to a different organizations, shows eligibility and impact. */
    post: operations['ProjectTransferController_previewTransfer']
  }
  '/platform/projects/{ref}/update': {
    /**
     * Updates the project
     * @deprecated
     * @description Replaced by PATCH /platform/projects/:ref
     */
    post: operations['UpdateController_updateProject']
  }
  '/platform/projects/fly/{fly_extension_id}': {
    /** Gets project linked to fly extension id */
    get: operations['ProjectsController_getProjectByFlyExtensionId']
  }
  '/platform/props/project/{ref}/api': {
    /**
     * Gets project's api info
     * @deprecated
     */
    get: operations['ApiController_getProjectApi']
  }
  '/platform/props/project/{ref}/jwt-secret-update-status': {
    /** Gets the last JWT secret update status */
    get: operations['JwtSecretUpdateStatusController_getJwtSecretUpdateStatus']
  }
  '/platform/props/project/{ref}/settings': {
    /**
     * Gets project's settings
     * @deprecated
     */
    get: operations['PropsSettingsController_getProjectApi']
  }
  '/platform/reset-password': {
    /** Reset password for email */
    post: operations['ResetPasswordController_resetPassword']
  }
  '/platform/signup': {
    /** Sign up with email and password */
    post: operations['SignUpController_signUp']
  }
  '/platform/status': {
    /** Get infrastructure status */
    get: operations['StatusController_getStatus']
  }
  '/platform/storage/{ref}/archive': {
    /** Gets project storage archive */
    get: operations['StorageArchiveController_getArchive']
    /** Creates project storage archive */
    post: operations['StorageArchiveController_createArchive']
  }
  '/platform/storage/{ref}/buckets': {
    /** Gets list of buckets */
    get: operations['StorageBucketsController_getBuckets']
    /** Create bucket */
    post: operations['StorageBucketsController_createBucket']
  }
  '/platform/storage/{ref}/buckets/{id}': {
    /** Gets bucket */
    get: operations['StorageBucketIdController_getBucket']
    /** Deletes bucket */
    delete: operations['StorageBucketIdController_deleteBucket']
    /** Updates bucket */
    patch: operations['StorageBucketIdController_updateBucket']
  }
  '/platform/storage/{ref}/buckets/{id}/empty': {
    /** Removes all objects inside a single bucket. */
    post: operations['StorageBucketIdController_emptyBucket']
  }
  '/platform/storage/{ref}/buckets/{id}/objects': {
    /** Deletes objects */
    delete: operations['StorageObjectsController_deleteObjects']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/copy': {
    /** Copys object */
    post: operations['StorageObjectsController_copyObject']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/download': {
    /** Downloads a file from a private bucket */
    post: operations['StorageObjectsController_download']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/list': {
    /** Gets list of objects with the given bucket */
    post: operations['StorageObjectsController_getObjects']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/move': {
    /** Move object */
    post: operations['StorageObjectsController_moveObject']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/public-url': {
    /** Creates URL for an asset in a public bucket */
    post: operations['StorageObjectsController_createPublicUrl']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign': {
    /** Creates a signed URL */
    post: operations['StorageObjectsController_createSignedUrl']
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign-multi': {
    /** Gets multiple signed URLs */
    post: operations['StorageObjectsController_createSignedUrls']
  }
  '/platform/storage/{ref}/credentials': {
    /** Gets project storage credentials */
    get: operations['StorageS3CredentialsController_getAllCredentials']
    /** Creates project storage credential */
    post: operations['StorageS3CredentialsController_createCredential']
  }
  '/platform/storage/{ref}/credentials/{id}': {
    /** Deletes project storage credential */
    delete: operations['StorageS3CredentialsController_deleteCredential']
  }
  '/platform/stripe/invoices/overdue': {
    /** Gets information about overdue invoices that relate to the authenticated user */
    get: operations['InvoicesController_getOverdueInvoices']
  }
  '/platform/stripe/setup-intent': {
    /** Sets up a payment method */
    post: operations['SetupIntentController_setUpPaymentMethod']
  }
  '/platform/telemetry/event': {
    /** Sends analytics server event */
    post: operations['TelemetryEventController_sendServerEventV2']
  }
  '/platform/telemetry/groups/identify': {
    /** Send analytics group identify event */
    post: operations['TelemetryGroupsController_groupIdentify']
  }
  '/platform/telemetry/groups/reset': {
    /** Send analytics group reset event */
    post: operations['TelemetryGroupsController_groupReset']
  }
  '/platform/telemetry/identify': {
    /** Send analytics identify event */
    post: operations['TelemetryIdentifyController_identifyV2']
  }
  '/platform/telemetry/page': {
    /** Send server page event */
    post: operations['TelemetryPageController_sendServerPageV2']
  }
  '/platform/telemetry/page-leave': {
    /** Send analytics page leave event */
    post: operations['TelemetryPageLeaveController_pageLeave']
  }
  '/platform/telemetry/reset': {
    /** Reset analytics */
    post: operations['TelemetryResetController_reset']
  }
  '/platform/tos/fly': {
    /** Redirects to Fly sso flow */
    get: operations['TermsOfServiceController_flyTosAccepted']
  }
  '/platform/vercel/projects': {
    /** Gets the list of Vercel projects */
    get: operations['VercelProjectsController_getVercelProjects']
  }
  '/platform/vercel/projects/{id}': {
    /** Gets the Vercel project with the given ID */
    get: operations['VercelProjectsController_getVercelProject']
  }
  '/platform/vercel/projects/envs': {
    /** Gets the environment variables for the given project ID on behalf of the given team ID */
    get: operations['VercelEnvironmentVariablesController_getEnvironmentVariables']
    /** Creates the environment variable for the given project ID on behalf of the given team ID */
    post: operations['VercelEnvironmentVariablesController_createEnvironmentVariable']
  }
  '/platform/vercel/redirect/{installation_id}': {
    /** Gets the Vercel redirect url */
    get: operations['VercelRedirectController_getRedirectUrl']
  }
  '/platform/vercel/token': {
    /** Gets the Vercel access token for the given code */
    get: operations['VercelAccessTokenController_getAccessToken']
  }
  '/platform/workflow-runs': {
    /** Get a list of workflow runs */
    get: operations['WorkflowRunController_listWorkflowRuns']
    /** Count the number of workflow runs for the given branch */
    head: operations['WorkflowRunController_countWorkflowRuns']
  }
  '/platform/workflow-runs/{workflow_run_id}/logs': {
    /** Get the logs of a workflow run */
    get: operations['WorkflowRunController_getWorkflowRunLogs']
  }
  '/system/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['SystemAuthTemplateController_getTemplate']
  }
  '/system/database/{ref}/password': {
    /** Updates the database password */
    patch: operations['DatabasePasswordController_updatePassword']
  }
  '/system/github-secret-alert': {
    /** Reset JWT if leaked keys found by GitHub secret scanning */
    post: operations['GithubSecretAlertController_resetJwt']
  }
  '/system/health': {
    /** Get API health status */
    get: operations['HealthController_getStatus']
  }
  '/system/integrations/github/webhooks': {
    /** Processes GitHub event */
    post: operations['GitHubWebhooksController_processEvent']
  }
  '/system/integrations/vercel/webhooks': {
    /** Processes Vercel event */
    post: operations['VercelWebhooksController_processEvent']
  }
  '/system/orb/vercel/sync/invoices/{invoice_id}': {
    /** Syncs an invoice to Vercel. If already synced, Vercel will not process it again. */
    post: operations['VercelSyncController_syncInvoice']
  }
  '/system/orb/webhooks': {
    /** Processes Orb events */
    post: operations['OrbWebhooksController_processEvent']
  }
  '/system/organizations/{slug}/billing/subscription': {
    /** Gets the current subscription */
    get: operations['OrgSubscriptionSystemController_getSubscription']
    /** Updates subscription */
    put: operations['OrgSubscriptionSystemController_updateSubscription']
  }
  '/system/organizations/{slug}/restrictions': {
    /** Updates restriction status of an org */
    put: operations['OrgRestrictionsSystemController_updateRestriction']
  }
  '/system/organizations/{slug}/usage': {
    /** Gets usage stats */
    get: operations['OrgUsageSystemController_getOrgUsage']
  }
  '/system/partner-organizations': {
    /** Creates a partner organization */
    post: operations['AwsPartnerOrganizationsSystemController_createPartnerOrganization']
  }
  '/system/projects': {
    /** Create a project */
    post: operations['SystemProjectsController_createProject']
  }
  '/system/projects/{ref}/billing/addons': {
    /** Updates project addon */
    post: operations['AddonsController_updateAddon']
  }
  '/system/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['AddonsController_removeAddon']
  }
  '/system/projects/{ref}/config/update-jwt/complete': {
    /** Handle update project jwt on completion */
    post: operations['ProjectUpdateJwtController_completeUpdateJwt']
  }
  '/system/projects/{ref}/credentials/aws': {
    /** Allows a project to obtain temporary credentials. */
    post: operations['AwsCredentialsController_getTemporaryCredentials']
  }
  '/system/projects/{ref}/functions': {
    /**
     * List all functions
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations['v1-list-all-functions']
    /**
     * Create a function
     * @description Creates a function and adds it to the specified project.
     */
    post: operations['v1-create-a-function']
    /** Deletes all Edge Functions from a project */
    delete: operations['SystemFunctionsController_systemDeleteAllFunctions']
  }
  '/system/projects/{ref}/functions/{function_slug}': {
    /**
     * Delete a function
     * @description Deletes a function with the specified slug from the specified project.
     */
    delete: operations['v1-delete-a-function']
    /**
     * Update a function
     * @description Updates a function with the specified slug and project.
     */
    patch: operations['v1-update-a-function']
  }
  '/system/projects/{ref}/ha-events': {
    /** Records an HA event */
    put: operations['HaEventsController_updateStatus']
  }
  '/system/projects/{ref}/health-reporting': {
    /** Updates a project's health status. */
    put: operations['HealthReportingController_updateStatus']
  }
  '/system/projects/{ref}/run-lints': {
    /** Run project lints */
    get: operations['SystemProjectRunLintsController_runProjectLints']
  }
  '/system/projects/{ref}/secrets': {
    /**
     * List all secrets
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations['v1-list-all-secrets']
    /**
     * Bulk create secrets
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations['v1-bulk-create-secrets']
    /**
     * Bulk delete secrets
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations['v1-bulk-delete-secrets']
  }
  '/system/projects/{ref}/secrets/refresh': {
    /** Refreshes secrets */
    post: operations['SecretsRefreshController_refreshSecrets']
  }
  '/system/projects/{ref}/wal-verification-reporting': {
    /** Processes a project's WAL verification report. */
    put: operations['WalVerificationReportingController_processWalVerification']
  }
  '/system/stripe/webhooks': {
    /** Processes Stripe event */
    post: operations['StripeWebhooksController_processEvent']
  }
  '/system/stripe/webhooks-v2': {
    /** Processes Stripe event */
    post: operations['StripeWebhooksController_processEvent']
  }
  '/v0/auth/{ref}/config': {
    /** Gets GoTrue config */
    get: operations['GoTrueConfigController_getGoTrueConfig']
    /** Updates GoTrue config */
    patch: operations['GoTrueConfigController_updateGoTrueConfig']
  }
  '/v0/auth/{ref}/config/hooks': {
    /** Updates GoTrue config hooks */
    patch: operations['GoTrueConfigController_updateGoTrueConfigHooks']
  }
  '/v0/auth/{ref}/invite': {
    /** Sends an invite to the given email */
    post: operations['AuthInviteController_sendInvite']
  }
  '/v0/auth/{ref}/magiclink': {
    /** Sends a magic link to the given email */
    post: operations['MagicLinkController_sendMagicLink']
  }
  '/v0/auth/{ref}/otp': {
    /** Sends an OTP to the given phone number */
    post: operations['OtpController_sendOtp']
  }
  '/v0/auth/{ref}/recover': {
    /** Sends a recovery email to the given email */
    post: operations['RecoverController_sendRecover']
  }
  '/v0/auth/{ref}/templates/{template}': {
    /** Gets GoTrue template */
    get: operations['TemplateController_getTemplate']
  }
  '/v0/auth/{ref}/users': {
    /**
     * Gets users
     * @deprecated
     */
    get: operations['UsersController_getUsers']
    /** Creates user */
    post: operations['UsersController_createUser']
    /**
     * Delete user with given ID
     * @deprecated
     */
    delete: operations['UsersController_deleteUser']
  }
  '/v0/auth/{ref}/users/{id}': {
    /** Delete user with given ID */
    delete: operations['UsersController_deleteUserById']
    /** Updates user with given ID */
    patch: operations['UsersController_updateUserById']
  }
  '/v0/auth/{ref}/users/{id}/factors': {
    /** Delete all factors associated to a user */
    delete: operations['FactorsController_deleteFactors']
  }
  '/v0/database/{ref}/backups': {
    /** Gets project backups */
    get: operations['BackupsController_getBackups']
  }
  '/v0/database/{ref}/backups/download': {
    /** Download project backup */
    post: operations['BackupsController_downloadBackup']
  }
  '/v0/database/{ref}/backups/downloadable-backups': {
    /** Gets backups that might be downloadable, but potentially not restorable. */
    get: operations['BackupsController_getDownloadableBackups']
  }
  '/v0/database/{ref}/backups/enable-physical-backups': {
    /** Enable usage of physical backups */
    post: operations['BackupsController_enablePhysicalBackup']
  }
  '/v0/database/{ref}/backups/pitr': {
    /** Restore project to a previous point in time */
    post: operations['BackupsController_restorePointInTimeBackup']
  }
  '/v0/database/{ref}/backups/restore': {
    /** Restore project backup */
    post: operations['BackupsController_restoreBackup']
  }
  '/v0/database/{ref}/backups/restore-physical': {
    /** Restore project with a physical backup */
    post: operations['BackupsController_restorePhysicalBackup']
  }
  '/v0/database/{ref}/hook-enable': {
    /** Enables Database Webhooks on the project */
    post: operations['HooksController_enableHooks']
  }
  '/v0/database/{ref}/hook-logs': {
    /** Gets hook logs with the given ID */
    get: operations['HooksController_getHookLogs']
  }
  '/v0/notifications': {
    /** Get notifications */
    get: operations['NotificationsController_getNotificationsV2']
    /** Delete notifications */
    delete: operations['NotificationsController_deleteNotifications']
    /** Update notifications */
    patch: operations['NotificationsController_updateNotificationsV2']
  }
  '/v0/notifications/archive-all': {
    /** Archives all notifications */
    patch: operations['NotificationsController_archiveAllNotifications']
  }
  '/v0/notifications/summary': {
    /** Get an aggregated data of interest across all notifications for the user */
    get: operations['NotificationsController_getNotificationsSummary']
  }
  '/v0/organizations': {
    /** Gets user's organizations */
    get: operations['OrganizationsController_getOrganizations']
    /** Creates an organization */
    post: operations['OrganizationsController_createOrganizationWithTier']
  }
  '/v0/organizations/{slug}': {
    /** Deletes organization */
    delete: operations['OrganizationSlugController_deleteOrganization']
    /** Updates organization */
    patch: operations['OrganizationSlugController_updateOrganization']
  }
  '/v0/organizations/{slug}/available-versions': {
    /** Retrieves a list of available Postgres versions available to the organization */
    post: operations['OrganizationSlugController_getAvailableImageVersions']
  }
  '/v0/organizations/{slug}/members': {
    /** Gets organization's members */
    get: operations['MembersController_getMembers']
  }
  '/v0/organizations/{slug}/members/{gotrue_id}': {
    /** Removes organization member */
    delete: operations['MembersController_deleteMember']
    /** Assign organization member with new role */
    patch: operations['MembersController_assignMemberRoleV2']
  }
  '/v0/organizations/{slug}/members/{gotrue_id}/roles/{role_id}': {
    /** Update organization member role */
    put: operations['MembersController_UpdateMemberRole']
    /** Removes organization member role */
    delete: operations['MembersController_deleteMemberRole']
  }
  '/v0/organizations/{slug}/members/invite': {
    /**
     * Gets invited users
     * @deprecated
     */
    get: operations['OrganizationInviteController_getInvitedUsers']
    /**
     * Invites user
     * @deprecated
     */
    post: operations['OrganizationInviteController_inviteUser']
    /**
     * Delete invited user
     * @deprecated
     */
    delete: operations['OrganizationInviteController_deleteInvitedUser']
  }
  '/v0/organizations/{slug}/members/join': {
    /**
     * Gets invite
     * @deprecated
     */
    get: operations['JoinController_getInvite']
    /**
     * Joins organization
     * @deprecated
     */
    post: operations['JoinController_joinOrganization']
  }
  '/v0/organizations/{slug}/roles': {
    /** Gets the given organization's roles */
    get: operations['OrganizationRolesController_getAllRolesV2']
  }
  '/v0/organizations/fly/{fly_organization_id}': {
    /** Gets organization linked to fly organization id */
    get: operations['OrganizationsController_getOrganizationByFlyOrganizationId']
  }
  '/v0/pg-meta/{ref}/column-privileges': {
    /** Retrieve column privileges */
    get: operations['ColumnPrivilegesController_getColumnPrivileges']
    /** Grant column privileges */
    post: operations['ColumnPrivilegesController_grantColumnPrivileges']
    /** Revoke column privileges */
    delete: operations['ColumnPrivilegesController_revokeColumnPrivileges']
  }
  '/v0/pg-meta/{ref}/columns': {
    /** Gets project pg.columns */
    get: operations['ColumnsController_getColumns']
    /** Creates project pg.column */
    post: operations['ColumnsController_createColumn']
    /** Deletes project pg.column with the given ID */
    delete: operations['ColumnsController_deleteColumn']
    /** Updates project pg.column with the given ID */
    patch: operations['ColumnsController_updateColumn']
  }
  '/v0/pg-meta/{ref}/extensions': {
    /** Gets project pg.extensions */
    get: operations['ExtensionsController_getExtensions']
    /** Creates project pg.extension */
    post: operations['ExtensionsController_createExtension']
    /** Deletes project pg.extension with the given ID */
    delete: operations['ExtensionsController_deleteExtension']
  }
  '/v0/pg-meta/{ref}/foreign-tables': {
    /** Retrieve database foreign tables */
    get: operations['ForeignTablesController_getForeignTables']
  }
  '/v0/pg-meta/{ref}/functions': {
    /** Gets project pg.functions */
    get: operations['FunctionsController_getFunctions']
    /** Creates project pg.function */
    post: operations['FunctionsController_createFunction']
    /** Deletes project pg.function with the given ID */
    delete: operations['FunctionsController_deleteFunction']
    /** Updates project pg.function with the given ID */
    patch: operations['FunctionsController_updateFunction']
  }
  '/v0/pg-meta/{ref}/materialized-views': {
    /** Retrieve database materialized views */
    get: operations['MaterializedViewsController_getMaterializedViews']
  }
  '/v0/pg-meta/{ref}/policies': {
    /** Gets project pg.policies */
    get: operations['PoliciesController_getPolicies']
    /** Creates project pg.policy */
    post: operations['PoliciesController_createPolicy']
    /** Deletes project pg.policy with the given ID */
    delete: operations['PoliciesController_deletePolicy']
    /** Updates project pg.policy with the given ID */
    patch: operations['PoliciesController_updatePolicy']
  }
  '/v0/pg-meta/{ref}/publications': {
    /** Gets project pg.publications */
    get: operations['PublicationsController_getPublications']
    /** Gets project pg.publications */
    post: operations['PublicationsController_createPublication']
    /** Deletes project pg.publication with the given ID */
    delete: operations['PublicationsController_deletePublication']
    /** Updates project pg.publication with the given ID */
    patch: operations['PublicationsController_updatePublication']
  }
  '/v0/pg-meta/{ref}/query': {
    /** Run sql query */
    post: operations['QueryController_runQuery']
  }
  '/v0/pg-meta/{ref}/query/format': {
    /** Format sql query */
    post: operations['QueryController_formatQuery']
  }
  '/v0/pg-meta/{ref}/query/validate': {
    /** Validate sql query */
    post: operations['QueryController_validateQuery']
  }
  '/v0/pg-meta/{ref}/roles': {
    /** Gets project pg.roles */
    get: operations['RolesController_getRoles']
    /** Creates project pg.role */
    post: operations['RolesController_createRole']
    /** Deletes project pg.role with the given ID */
    delete: operations['RolesController_deleteRole']
    /** Updates project pg.role with the given ID */
    patch: operations['RolesController_updateRole']
  }
  '/v0/pg-meta/{ref}/schemas': {
    /** Gets project pg.schemas */
    get: operations['SchemasController_getSchemas']
    /** Creates project pg.schema */
    post: operations['SchemasController_createSchema']
    /** Deletes project pg.schema with the given ID */
    delete: operations['SchemasController_deleteSchema']
    /** Updates project pg.schema with the given ID */
    patch: operations['SchemasController_updateSchema']
  }
  '/v0/pg-meta/{ref}/search/columns': {
    /** Searches project pg.columns. Return maximum 50 results. */
    post: operations['SearchController_searchColumns']
  }
  '/v0/pg-meta/{ref}/search/tables': {
    /** Searches project pg.tables. Return maximum 50 results. */
    post: operations['SearchController_searchTables']
  }
  '/v0/pg-meta/{ref}/table-privileges': {
    /** Retrieve table privileges */
    get: operations['TablePrivilegesController_getTablePrivileges']
    /** Grant table privileges */
    post: operations['TablePrivilegesController_grantTablePrivileges']
    /** Revoke table privileges */
    delete: operations['TablePrivilegesController_revokeTablePrivileges']
  }
  '/v0/pg-meta/{ref}/tables': {
    /** Gets project pg.tables or pg.table with the given ID */
    get: operations['TablesController_getTables']
    /** Creates project pg.table */
    post: operations['TablesController_createTable']
    /** Deletes project pg.table with the given ID */
    delete: operations['TablesController_deleteTable']
    /** Updates project pg.table with the given ID */
    patch: operations['TablesController_updateTable']
  }
  '/v0/pg-meta/{ref}/triggers': {
    /** Gets project pg.triggers */
    get: operations['TriggersController_getTriggers']
    /** Creates project pg.trigger */
    post: operations['TriggersController_createTrigger']
    /** Deletes project pg.trigger with the given ID */
    delete: operations['TriggersController_deleteTrigger']
    /** Updates project pg.trigger with the given ID */
    patch: operations['TriggersController_updateTrigger']
  }
  '/v0/pg-meta/{ref}/types': {
    /** Gets project pg.types */
    get: operations['TypesController_getTypes']
  }
  '/v0/pg-meta/{ref}/views': {
    /** Retrieve database views */
    get: operations['ViewsController_getViews']
  }
  '/v0/projects': {
    /**
     * Gets all projects that belong to the authenticated user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsController_getProjects']
    /** Creates a project */
    post: operations['ProjectsController_createProject']
  }
  '/v0/projects/{ref}': {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['ProjectsRefController_getProject']
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
    /** Updates the given project */
    patch: operations['ProjectsRefController_updateProject']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.inv-stats': {
    /** Gets a project's function invocation statistics */
    get: operations['FunctionInvocationLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.req-stats': {
    /** Gets a project's function request statistics */
    get: operations['FunctionRequestLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/functions.resource-usage': {
    /** Gets a project's function resource usage */
    get: operations['FunctionResourceLogsController_getStatus']
  }
  '/v0/projects/{ref}/analytics/endpoints/logs.all': {
    /** Gets project's logs */
    get: operations['LogsController_getApiPaths']
  }
  '/v0/projects/{ref}/analytics/endpoints/usage.api-counts': {
    /** Gets project's usage api counts */
    get: operations['UsageApiController_getApiCounts']
  }
  '/v0/projects/{ref}/analytics/endpoints/usage.api-requests-count': {
    /** Gets project's usage api requests count */
    get: operations['UsageApiController_getApiRequestsCount']
  }
  '/v0/projects/{ref}/analytics/log-drains': {
    /** Lists all log drains */
    get: operations['LogDrainController_listLogDrains']
    /** Create a log drain */
    post: operations['LogDrainController_createLogDrain']
  }
  '/v0/projects/{ref}/analytics/log-drains/{token}': {
    /** Update a log drain */
    put: operations['LogDrainController_updateLogDrain']
    /** Delete a log drain */
    delete: operations['LogDrainController_deleteLogDrain']
  }
  '/v0/projects/{ref}/analytics/warehouse/access-tokens': {
    /** Lists project's warehouse access tokens from logflare */
    get: operations['v1-list-all-warehouse-tokens']
    /** Create a warehouse access token */
    post: operations['v1-create-a-warehouse-token']
  }
  '/v0/projects/{ref}/analytics/warehouse/access-tokens/{token}': {
    /** Delete a warehouse access token */
    delete: operations['v1-delete-a-warehouse-token']
  }
  '/v0/projects/{ref}/analytics/warehouse/collections': {
    /** Lists project's warehouse collections from logflare */
    get: operations['v1-list-all-warehouse-collections']
    /** Create a warehouse collection */
    post: operations['v1-create-a-warehouse-collection']
  }
  '/v0/projects/{ref}/analytics/warehouse/collections/{token}': {
    /** Get a warehouse collection */
    get: operations['v1-get-a-warehouse-collection']
    /** Delete a warehouse collection */
    delete: operations['v1-delete-a-warehouse-collection']
    /** Update a warehouse collection */
    patch: operations['v1-update-a-warehouse-collection']
  }
  '/v0/projects/{ref}/analytics/warehouse/endpoints': {
    /** Lists project's warehouse endpoints from logflare */
    get: operations['v1-list-all-warehouse-endpoints']
    /** Create a warehouse endpoint */
    post: operations['v1-create-a-warehouse-endpoint']
  }
  '/v0/projects/{ref}/analytics/warehouse/endpoints/{token}': {
    /** Update a warehouse endpoint */
    put: operations['v1-update-a-warehouse-endpoint']
    /** Delete a warehouse endpoint */
    delete: operations['v1-delete-a-warehouse-endpoint']
  }
  '/v0/projects/{ref}/analytics/warehouse/query': {
    /** Lists project's warehouse queries from logflare */
    get: operations['v1-list-all-warehouse-queries']
  }
  '/v0/projects/{ref}/analytics/warehouse/query/parse': {
    /** Parses a warehouse query */
    get: operations['v1-parse-warehouse-query']
  }
  '/v0/projects/{ref}/analytics/warehouse/tenant': {
    /** Gets project's warehouse tenant from logflare */
    get: operations['v1-provision-a-warehouse-tenant']
  }
  '/v0/projects/{ref}/api/graphql': {
    /** Queries project Graphql */
    post: operations['ProjectsApiController_projectGraphql']
  }
  '/v0/projects/{ref}/api/rest': {
    /** Gets project OpenApi */
    get: operations['ProjectsApiController_projectOpenApi']
  }
  '/v0/projects/{ref}/billing/addons': {
    /** Gets project addons */
    get: operations['ProjectAddonController_getProjectAddons']
    /** Updates project addon */
    post: operations['ProjectAddonController_updateAddon']
  }
  '/v0/projects/{ref}/billing/addons/{addon_variant}': {
    /** Removes project addon */
    delete: operations['ProjectAddonController_removeAddon']
  }
  '/v0/projects/{ref}/config/pgbouncer': {
    /** Gets project's pgbouncer config */
    get: operations['PgbouncerConfigController_getPgbouncerConfig']
    /** Updates project's pgbouncer config */
    patch: operations['PgbouncerConfigController_updatePgbouncerConfig']
  }
  '/v0/projects/{ref}/config/pgbouncer/status': {
    /** Gets project's pgbouncer status */
    get: operations['PgbouncerConfigController_getPgbouncerStatus']
  }
  '/v0/projects/{ref}/config/postgres': {
    /** Gets project's Postgres config */
    get: operations['v1-get-postgres-config']
    /** Updates project's Postgres config */
    put: operations['v1-update-postgres-config']
  }
  '/v0/projects/{ref}/config/postgrest': {
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
  }
  '/v0/projects/{ref}/config/secrets': {
    /** Updates project's secrets config */
    patch: operations['SecretsConfigController_updateConfig']
  }
  '/v0/projects/{ref}/config/storage': {
    /** Gets project's storage config */
    get: operations['StorageConfigController_getConfig']
    /** Updates project's storage config */
    patch: operations['StorageConfigController_updateConfig']
  }
  '/v0/projects/{ref}/config/supavisor': {
    /** Gets project's supavisor config */
    get: operations['v1-get-supavisor-config']
    /** Updates project's supavisor config */
    patch: operations['v1-update-supavisor-config']
  }
  '/v0/projects/{ref}/content': {
    /**
     * Gets project's content
     * @deprecated
     */
    get: operations['ContentController_getContent']
    /** Updates project's content */
    put: operations['ContentController_updateWholeContentV2']
    /** Creates project's content */
    post: operations['ContentController_createContentV2']
    /** Deletes project's contents */
    delete: operations['ContentController_deleteContents']
    /**
     * Updates project's content
     * @deprecated
     */
    patch: operations['ContentController_updateContent']
  }
  '/v0/projects/{ref}/content/count': {
    /** Gets the count of a user's content by type */
    get: operations['ContentController_getContentCount']
  }
  '/v0/projects/{ref}/content/item/{id}': {
    /** Gets project's content by the given id */
    get: operations['ContentController_getContentById']
  }
  '/v0/projects/{ref}/databases': {
    /** Gets non-removed databases of a specified project */
    get: operations['DatabasesController_getDatabases']
  }
  '/v0/projects/{ref}/databases-statuses': {
    /** Gets statuses of databases within a project */
    get: operations['DatabasesStatusesController_getStatus']
  }
  '/v0/projects/{ref}/db-password': {
    /** Updates the database password */
    patch: operations['DbPasswordController_updatePassword']
  }
  '/v0/projects/{ref}/disk': {
    /** Get database disk attributes */
    get: operations['DiskController_getDisk']
    /** Modify database disk */
    post: operations['DiskController_modifyDisk']
  }
  '/v0/projects/{ref}/disk/util': {
    /** Get disk utilization */
    get: operations['DiskController_getDiskUtilization']
  }
  '/v0/projects/{ref}/infra-monitoring': {
    /** Gets project's usage metrics */
    get: operations['InfraMonitoringController_getUsageMetrics']
  }
  '/v0/projects/{ref}/live': {
    /** Gets project health check */
    get: operations['HealthCheckController_projectHealthCheck']
  }
  '/v0/projects/{ref}/load-balancers': {
    /** Gets non-removed databases of a specified project */
    get: operations['LoadBalancersController_getLoadBalancers']
  }
  '/v0/projects/{ref}/pause': {
    /** Pauses the project */
    post: operations['PauseController_pauseProject']
  }
  '/v0/projects/{ref}/pause/status': {
    /** Gets the latest pause event for a project if a project is paused */
    get: operations['PauseController_getProject']
  }
  '/v0/projects/{ref}/resize': {
    /** Resize database disk */
    post: operations['ResizeController_resizeDatabase']
  }
  '/v0/projects/{ref}/restart': {
    /** Restarts project */
    post: operations['RestartController_restartProject']
  }
  '/v0/projects/{ref}/restart-services': {
    /** Restarts given services */
    post: operations['RestartServicesController_restartServices']
  }
  '/v0/projects/{ref}/restore': {
    /** Unpauses project */
    post: operations['UnpauseController_unpauseProject']
  }
  '/v0/projects/{ref}/restore/cancel': {
    /** Cancels a failed restoration */
    post: operations['UnpauseController_cancelProjectRestoration']
  }
  '/v0/projects/{ref}/restore/versions': {
    /** Retrieves versions to which a project can be restored */
    get: operations['UnpauseController_getAvailableImageVersions']
  }
  '/v0/projects/{ref}/settings': {
    /** Gets project's settings */
    get: operations['SettingsController_getProjectApi']
  }
  '/v0/projects/{ref}/status': {
    /** Gets project's status */
    get: operations['ProjectStatusController_getStatus']
  }
  '/v0/projects/fly/{fly_extension_id}': {
    /** Gets project linked to fly extension id */
    get: operations['ProjectsController_getProjectByFlyExtensionId']
  }
  '/v0/projects/metrics': {
    /**
     * Get metrics
     * @description At most 50 projects can be queried at a time.
     * Currently supports '1d', '3d', and '7d' intervals.
     */
    get: operations['V0ProjectsMetricsController_getProjectsMetrics']
  }
  '/v0/status': {
    /** Get infrastructure status */
    get: operations['StatusController_getStatus']
  }
  '/v0/storage/{ref}/archive': {
    /** Gets project storage archive */
    get: operations['StorageArchiveController_getArchive']
    /** Creates project storage archive */
    post: operations['StorageArchiveController_createArchive']
  }
  '/v0/storage/{ref}/buckets': {
    /** Gets list of buckets */
    get: operations['StorageBucketsController_getBuckets']
    /** Create bucket */
    post: operations['StorageBucketsController_createBucket']
  }
  '/v0/storage/{ref}/buckets/{id}': {
    /** Gets bucket */
    get: operations['StorageBucketIdController_getBucket']
    /** Deletes bucket */
    delete: operations['StorageBucketIdController_deleteBucket']
    /** Updates bucket */
    patch: operations['StorageBucketIdController_updateBucket']
  }
  '/v0/storage/{ref}/buckets/{id}/empty': {
    /** Removes all objects inside a single bucket. */
    post: operations['StorageBucketIdController_emptyBucket']
  }
  '/v0/storage/{ref}/buckets/{id}/objects': {
    /** Deletes objects */
    delete: operations['StorageObjectsController_deleteObjects']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/copy': {
    /** Copys object */
    post: operations['StorageObjectsController_copyObject']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/download': {
    /** Downloads a file from a private bucket */
    post: operations['StorageObjectsController_download']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/list': {
    /** Gets list of objects with the given bucket */
    post: operations['StorageObjectsController_getObjects']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/move': {
    /** Move object */
    post: operations['StorageObjectsController_moveObject']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/public-url': {
    /** Creates URL for an asset in a public bucket */
    post: operations['StorageObjectsController_createPublicUrl']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/sign': {
    /** Creates a signed URL */
    post: operations['StorageObjectsController_createSignedUrl']
  }
  '/v0/storage/{ref}/buckets/{id}/objects/sign-multi': {
    /** Gets multiple signed URLs */
    post: operations['StorageObjectsController_createSignedUrls']
  }
  '/v0/storage/{ref}/credentials': {
    /** Gets project storage credentials */
    get: operations['StorageS3CredentialsController_getAllCredentials']
    /** Creates project storage credential */
    post: operations['StorageS3CredentialsController_createCredential']
  }
  '/v0/storage/{ref}/credentials/{id}': {
    /** Deletes project storage credential */
    delete: operations['StorageS3CredentialsController_deleteCredential']
  }
  '/v1/branches/{branch_id}': {
    /**
     * Get database branch config
     * @description Fetches configurations of the specified database branch
     */
    get: operations['v1-get-a-branch-config']
    /**
     * Delete a database branch
     * @description Deletes the specified database branch
     */
    delete: operations['v1-delete-a-branch']
    /**
     * Update database branch config
     * @description Updates the configuration of the specified database branch
     */
    patch: operations['v1-update-a-branch-config']
  }
  '/v1/branches/{branch_id}/reset': {
    /**
     * Resets a database branch
     * @description Resets the specified database branch
     */
    post: operations['v1-reset-a-branch']
  }
  '/v1/oauth/authorize': {
    /** [Beta] Authorize user through oauth */
    get: operations['v1-authorize-user']
  }
  '/v1/oauth/token': {
    /** [Beta] Exchange auth code for user's access and refresh token */
    post: operations['v1-exchange-oauth-token']
  }
  '/v1/organizations': {
    /**
     * List all organizations
     * @description Returns a list of organizations that you currently belong to.
     */
    get: operations['v1-list-all-organizations']
    /** Create an organization */
    post: operations['v1-create-an-organization']
  }
  '/v1/organizations/{slug}': {
    /** Gets information about the organization */
    get: operations['v1-get-an-organization']
  }
  '/v1/organizations/{slug}/members': {
    /** List members of an organization */
    get: operations['v1-list-organization-members']
  }
  '/v1/projects': {
    /**
     * List all projects
     * @description Returns a list of all projects you've previously created.
     */
    get: operations['v1-list-all-projects']
    /** Create a project */
    post: operations['v1-create-a-project']
  }
  '/v1/projects/{ref}': {
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['v1-get-project']
    /** Deletes the given project */
    delete: operations['v1-delete-a-project']
  }
  '/v1/projects/{ref}/api-keys': {
    /** Get project api keys */
    get: operations['v1-get-project-api-keys']
    /** [Alpha] Creates a new API key for the project */
    post: operations['ApiKeysController_createApiKey']
  }
  '/v1/projects/{ref}/api-keys/{id}': {
    /** [Alpha] Deletes an API key for the project */
    delete: operations['ApiKeysController_deleteApiKey']
    /** [Alpha] Updates an API key for the project */
    patch: operations['ApiKeysController_updateApiKey']
  }
  '/v1/projects/{ref}/branches': {
    /**
     * List all database branches
     * @description Returns all database branches of the specified project.
     */
    get: operations['v1-list-all-branches']
    /**
     * Create a database branch
     * @description Creates a database branch from the specified project.
     */
    post: operations['v1-create-a-branch']
    /**
     * Disables preview branching
     * @description Disables preview branching for the specified project
     */
    delete: operations['v1-disable-preview-branching']
  }
  '/v1/projects/{ref}/config/auth': {
    /** Gets project's auth config */
    get: operations['v1-get-auth-service-config']
    /** Updates a project's auth config */
    patch: operations['v1-update-auth-service-config']
  }
  '/v1/projects/{ref}/config/auth/sso/providers': {
    /** Lists all SSO providers */
    get: operations['v1-list-all-sso-provider']
    /** Creates a new SSO provider */
    post: operations['v1-create-a-sso-provider']
  }
  '/v1/projects/{ref}/config/auth/sso/providers/{provider_id}': {
    /** Gets a SSO provider by its UUID */
    get: operations['v1-get-a-sso-provider']
    /** Updates a SSO provider by its UUID */
    put: operations['v1-update-a-sso-provider']
    /** Removes a SSO provider by its UUID */
    delete: operations['v1-delete-a-sso-provider']
  }
  '/v1/projects/{ref}/config/auth/third-party-auth': {
    /** [Alpha] Lists all third-party auth integrations */
    get: operations['ThirdPartyAuthController_listTPAForProject']
    /** Creates a new third-party auth integration */
    post: operations['ThirdPartyAuthController_createTPAForProject']
  }
  '/v1/projects/{ref}/config/auth/third-party-auth/{tpa_id}': {
    /** [Alpha] Get a third-party integration */
    get: operations['ThirdPartyAuthController_getTPAForProject']
    /** [Alpha] Removes a third-party auth integration */
    delete: operations['ThirdPartyAuthController_deleteTPAForProject']
  }
  '/v1/projects/{ref}/config/database/pgbouncer': {
    /** Get project's pgbouncer config */
    get: operations['v1-get-project-pgbouncer-config']
  }
  '/v1/projects/{ref}/config/database/pooler': {
    /** Gets project's supavisor config */
    get: operations['v1-get-supavisor-config']
    /** Updates project's supavisor config */
    patch: operations['v1-update-supavisor-config']
  }
  '/v1/projects/{ref}/config/database/postgres': {
    /** Gets project's Postgres config */
    get: operations['v1-get-postgres-config']
    /** Updates project's Postgres config */
    put: operations['v1-update-postgres-config']
  }
  '/v1/projects/{ref}/custom-hostname': {
    /** [Beta] Gets project's custom hostname config */
    get: operations['v1-get-hostname-config']
    /** [Beta] Deletes a project's custom hostname configuration */
    delete: operations['v1-Delete hostname config']
  }
  '/v1/projects/{ref}/custom-hostname/activate': {
    /** [Beta] Activates a custom hostname for a project. */
    post: operations['v1-activate-custom-hostname']
  }
  '/v1/projects/{ref}/custom-hostname/initialize': {
    /** [Beta] Updates project's custom hostname configuration */
    post: operations['v1-update-hostname-config']
  }
  '/v1/projects/{ref}/custom-hostname/reverify': {
    /** [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration */
    post: operations['v1-verify-dns-config']
  }
  '/v1/projects/{ref}/database/backups': {
    /** Lists all backups */
    get: operations['v1-list-all-backups']
  }
  '/v1/projects/{ref}/database/backups/restore-pitr': {
    /** Restores a PITR backup for a database */
    post: operations['v1-restore-pitr-backup']
  }
  '/v1/projects/{ref}/database/query': {
    /** [Beta] Run sql query */
    post: operations['v1-run-a-query']
  }
  '/v1/projects/{ref}/database/webhooks/enable': {
    /** [Beta] Enables Database Webhooks on the project */
    post: operations['v1-enable-database-webhook']
  }
  '/v1/projects/{ref}/functions': {
    /**
     * List all functions
     * @description Returns all functions you've previously added to the specified project.
     */
    get: operations['v1-list-all-functions']
    /**
     * Create a function
     * @description Creates a function and adds it to the specified project.
     */
    post: operations['v1-create-a-function']
  }
  '/v1/projects/{ref}/functions/{function_slug}': {
    /**
     * Retrieve a function
     * @description Retrieves a function with the specified slug and project.
     */
    get: operations['v1-get-a-function']
    /**
     * Delete a function
     * @description Deletes a function with the specified slug from the specified project.
     */
    delete: operations['v1-delete-a-function']
    /**
     * Update a function
     * @description Updates a function with the specified slug and project.
     */
    patch: operations['v1-update-a-function']
  }
  '/v1/projects/{ref}/functions/{function_slug}/body': {
    /**
     * Retrieve a function body
     * @description Retrieves a function body for the specified slug and project.
     */
    get: operations['v1-get-a-function-body']
  }
  '/v1/projects/{ref}/health': {
    /** Gets project's service health status */
    get: operations['v1-get-services-health']
  }
  '/v1/projects/{ref}/network-bans': {
    /** [Beta] Remove network bans. */
    delete: operations['v1-delete-network-bans']
  }
  '/v1/projects/{ref}/network-bans/retrieve': {
    /** [Beta] Gets project's network bans */
    post: operations['v1-list-all-network-bans']
  }
  '/v1/projects/{ref}/network-restrictions': {
    /** [Beta] Gets project's network restrictions */
    get: operations['v1-get-network-restrictions']
  }
  '/v1/projects/{ref}/network-restrictions/apply': {
    /** [Beta] Updates project's network restrictions */
    post: operations['v1-update-network-restrictions']
  }
  '/v1/projects/{ref}/pgsodium': {
    /** [Beta] Gets project's pgsodium config */
    get: operations['v1-get-pgsodium-config']
    /** [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
    put: operations['v1-update-pgsodium-config']
  }
  '/v1/projects/{ref}/postgrest': {
    /** Gets project's postgrest config */
    get: operations['v1-get-postgrest-service-config']
    /** Updates project's postgrest config */
    patch: operations['v1-update-postgrest-service-config']
  }
  '/v1/projects/{ref}/read-replicas/remove': {
    /** [Beta] Remove a read replica */
    post: operations['v1-remove-a-read-replica']
  }
  '/v1/projects/{ref}/read-replicas/setup': {
    /** [Beta] Set up a read replica */
    post: operations['v1-setup-a-read-replica']
  }
  '/v1/projects/{ref}/readonly': {
    /** Returns project's readonly mode status */
    get: operations['v1-get-readonly-mode-status']
  }
  '/v1/projects/{ref}/readonly/temporary-disable': {
    /** Disables project's readonly mode for the next 15 minutes */
    post: operations['v1-disable-readonly-mode-temporarily']
  }
  '/v1/projects/{ref}/secrets': {
    /**
     * List all secrets
     * @description Returns all secrets you've previously added to the specified project.
     */
    get: operations['v1-list-all-secrets']
    /**
     * Bulk create secrets
     * @description Creates multiple secrets and adds them to the specified project.
     */
    post: operations['v1-bulk-create-secrets']
    /**
     * Bulk delete secrets
     * @description Deletes all secrets with the given names from the specified project
     */
    delete: operations['v1-bulk-delete-secrets']
  }
  '/v1/projects/{ref}/ssl-enforcement': {
    /** [Beta] Get project's SSL enforcement configuration. */
    get: operations['v1-get-ssl-enforcement-config']
    /** [Beta] Update project's SSL enforcement configuration. */
    put: operations['v1-update-ssl-enforcement-config']
  }
  '/v1/projects/{ref}/storage/buckets': {
    /** Lists all buckets */
    get: operations['v1-list-all-buckets']
  }
  '/v1/projects/{ref}/types/typescript': {
    /**
     * Generate TypeScript types
     * @description Returns the TypeScript types of your schema for use with supabase-js.
     */
    get: operations['v1-generate-typescript-types']
  }
  '/v1/projects/{ref}/upgrade': {
    /** [Beta] Upgrades the project's Postgres version */
    post: operations['v1-upgrade-postgres-version']
  }
  '/v1/projects/{ref}/upgrade/eligibility': {
    /** [Beta] Returns the project's eligibility for upgrades */
    get: operations['v1-get-postgres-upgrade-eligibility']
  }
  '/v1/projects/{ref}/upgrade/status': {
    /** [Beta] Gets the latest status of the project's upgrade */
    get: operations['v1-get-postgres-upgrade-status']
  }
  '/v1/projects/{ref}/vanity-subdomain': {
    /** [Beta] Gets current vanity subdomain config */
    get: operations['v1-get-vanity-subdomain-config']
    /** [Beta] Deletes a project's vanity subdomain configuration */
    delete: operations['v1-deactivate-vanity-subdomain-config']
  }
  '/v1/projects/{ref}/vanity-subdomain/activate': {
    /** [Beta] Activates a vanity subdomain for a project. */
    post: operations['v1-activate-vanity-subdomain-config']
  }
  '/v1/projects/{ref}/vanity-subdomain/check-availability': {
    /** [Beta] Checks vanity subdomain availability */
    post: operations['v1-check-vanity-subdomain-availability']
  }
  '/v1/snippets': {
    /** Lists SQL snippets for the logged in user */
    get: operations['v1-list-all-snippets']
  }
  '/v1/snippets/{id}': {
    /** Gets a specific SQL snippet */
    get: operations['v1-get-a-snippet']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @enum {string} */
    AddonVariantId:
      | 'ci_micro'
      | 'ci_small'
      | 'ci_medium'
      | 'ci_large'
      | 'ci_xlarge'
      | 'ci_2xlarge'
      | 'ci_4xlarge'
      | 'ci_8xlarge'
      | 'ci_12xlarge'
      | 'ci_16xlarge'
      | 'cd_default'
      | 'pitr_7'
      | 'pitr_14'
      | 'pitr_28'
      | 'ipv4_default'
      | 'auth_mfa_phone_default'
      | 'auth_mfa_web_authn_default'
      | 'log_drain_default'
    ApiResponse: Record<string, never>
    AssignMemberRoleBodyV2: Record<string, never>
    AuthHealthResponse: {
      description: string
      name: string
      version: string
    }
    BillingCustomerUpdateBody: Record<string, never>
    Buffer: Record<string, never>
    CopyObjectBody: Record<string, never>
    CreateAccessTokenBody: Record<string, never>
    CreateApiKeyBody: Record<string, never>
    CreateAwsPartnerOrganizationBody: Record<string, never>
    CreateBackendParams: Record<string, never>
    CreateBranchBody: {
      desired_instance_size: components['schemas']['DesiredInstanceSize']
      postgres_engine: components['schemas']['PostgresEngine']
      release_channel: components['schemas']['ReleaseChannel']
    }
    CreateCliLoginSessionBody: Record<string, never>
    CreateColumnBody: Record<string, never>
    CreateContentBody: Record<string, never>
    CreateContentBodyV2: Record<string, never>
    CreateContentFolderBody: Record<string, never>
    CreateExtensionBody: Record<string, never>
    CreateFunctionBody: Record<string, never>
    CreateGitHubAuthorizationBody: Record<string, never>
    CreateGitHubConnectionsBody: Record<string, never>
    CreateInvitationBody: Record<string, never>
    CreateOAuthAppBody: Record<string, never>
    CreateOrganizationBody: Record<string, never>
    CreateOrganizationBodyV1: Record<string, never>
    CreatePolicyBody: Record<string, never>
    CreateProjectBody: {
      /**
       * @description Provider region description
       * @example Southeast Asia (Singapore)
       */
      db_region: string
      desired_instance_size: components['schemas']['DesiredInstanceSize']
      /** @deprecated */
      org_id: number
      postgres_engine: components['schemas']['PostgresEngine']
      release_channel: components['schemas']['ReleaseChannel']
    }
    CreateProviderBody: {
      /**
       * @description What type of provider will be created
       * @enum {string}
       */
      type: 'saml'
    }
    CreatePublicationBody: Record<string, never>
    CreateRoleBody: Record<string, never>
    CreateSchemaBody: Record<string, never>
    CreateSecretBody: {
      /**
       * @description Secret name must not start with the SUPABASE_ prefix.
       * @example string
       */
      name: string
    }
    CreateStorageBucketBody: Record<string, never>
    CreateStorageCredentialBody: Record<string, never>
    CreateTableBody: Record<string, never>
    CreateTaxIdBody: Record<string, never>
    CreateThirdPartyAuthBody: Record<string, never>
    CreateTriggerBody: Record<string, never>
    CreateUserBody: Record<string, never>
    CreateVercelConnectionsBody: Record<string, never>
    CreateVercelEnvironmentVariableBody: Record<string, never>
    CreateVercelIntegrationBody: Record<string, never>
    CredentialsRequestBody: Record<string, never>
    DeleteObjectsBody: Record<string, never>
    /**
     * @description Desired instance size, will use default size if not defined. Paid Plans only.
     * @enum {string}
     */
    DesiredInstanceSize:
      | 'micro'
      | 'small'
      | 'medium'
      | 'large'
      | 'xlarge'
      | '2xlarge'
      | '4xlarge'
      | '8xlarge'
      | '12xlarge'
      | '16xlarge'
    DetachPaymentMethodBody: Record<string, never>
    DiskRequestAttributesGP3: {
      /** @enum {string} */
      type: 'gp3'
    }
    DiskRequestAttributesIO2: {
      /** @enum {string} */
      type: 'io2'
    }
    DiskRequestBody: {
      attributes:
        | components['schemas']['DiskRequestAttributesGP3']
        | components['schemas']['DiskRequestAttributesIO2']
    }
    DownloadBackupBody: Record<string, never>
    DownloadObjectBody: Record<string, never>
    EventBody: Record<string, never>
    FlyResourceProvisioningBody: {
      /** @description Database password (Optional, don't send to generate one) */
      db_pass: string
      /** @example large */
      desired_instance_size: components['schemas']['DesiredInstanceSize']
      /** @description Unique ID representing the extension */
      id: string
      /** @description An IPv6 address on the customer network assigned to this extension */
      ip_address: string
      /** @description Name of the extension */
      name: string
      /** @description A random unique string identifying the individual request */
      nonce: string
      /** @description Unique ID representing an organization */
      organization_id: string
      /** @description Display name for an organization */
      organization_name: string
      /** @example pro */
      organization_plan: components['schemas']['SelfServePlanId']
      /** @description The three-letter, primary Fly.io region where the target app intends to write from */
      primary_region: string
      /** @description An array of Fly.io region codes where read replicas should be provisioned */
      read_regions: string[]
      /** @description A UNIX epoch timestamp value */
      timestamp: number
      /** @description The full request target URL */
      url: string
      /** @description Obfuscated email that routes to the provisioning user */
      user_email: string
      /** @description Unique ID representing an user */
      user_id: string
    }
    FlyUpdateOrganizationSubscriptionBody: {
      /** @description A random unique string identifying the individual request */
      nonce: string
      /** @example pro */
      plan: components['schemas']['SelfServePlanId']
      /** @description A UNIX epoch timestamp value */
      timestamp: number
      /** @description The full request target URL */
      url: string
    }
    FormatQueryBody: Record<string, never>
    GetMetricsBody: Record<string, never>
    GetObjectsBody: Record<string, never>
    GetPublicUrlBody: Record<string, never>
    GetSignedUrlBody: Record<string, never>
    GetSignedUrlsBody: Record<string, never>
    GrantColumnPrivilegesBody: Record<string, never>
    GrantTablePrivilegesBody: Record<string, never>
    HCaptchaBody: {
      hcaptchaToken: string
    }
    InviteUserBody: Record<string, never>
    MarkDefaultPaymentMethodBody: Record<string, never>
    MoveObjectBody: Record<string, never>
    NetworkRestrictionsRequest: Record<string, never>
    OAuthTokenBody: Record<string, never>
    OrganizationSlugAvailableVersionsBody: Record<string, never>
    PasswordCheckBody: Record<string, never>
    PointInTimeRestoreBody: Record<string, never>
    /**
     * @description Postgres engine version. If not provided, the latest version will be used.
     * @enum {string}
     */
    PostgresEngine: '15'
    /** @enum {string} */
    ProjectAddonType:
      | 'custom_domain'
      | 'compute_instance'
      | 'pitr'
      | 'ipv4'
      | 'auth_mfa_phone'
      | 'auth_mfa_web_authn'
      | 'log_drain'
    ProjectSettingsResponse: Record<string, never>
    RealtimeHealthResponse: {
      connected_cluster: number
      db_connected: boolean
      healthy: boolean
    }
    /** @enum {string} */
    ReleaseChannel: 'internal' | 'alpha' | 'beta' | 'ga' | 'withdrawn'
    RemoveNetworkBanRequest: Record<string, never>
    RemoveReadReplicaBody: Record<string, never>
    ReportStatusBody: Record<string, never>
    ResetPasswordBody: Record<string, never>
    ResizeBody: Record<string, never>
    ResourceProvisioningEligibilityBody: {
      /** @description A random unique string identifying the individual request */
      nonce: string
      /** @description Unique ID representing an organization */
      organization_id: string
      /** @description A UNIX epoch timestamp value */
      timestamp: number
      /** @description The full request target URL */
      url: string
      /** @description Obfuscated email that routes to the provisioning user */
      user_email: string
    }
    RestartProjectInfo: Record<string, never>
    RestartServicesBody: Record<string, never>
    RestoreLogicalBackupBody: Record<string, never>
    RestorePhysicalBackupBody: Record<string, never>
    RevokeColumnPrivilegesBody: Record<string, never>
    RevokeTablePrivilegesBody: Record<string, never>
    RunQueryBody: Record<string, never>
    SearchColumnBody: Record<string, never>
    SearchProfileBody: Record<string, never>
    SearchTableBody: Record<string, never>
    /**
     * @description Organization subscription Plan
     * @enum {string}
     */
    SelfServePlanId: 'free' | 'pro' | 'team'
    SendDocsFeedbackBody: Record<string, never>
    SendExitSurveyBody: Record<string, never>
    SendFeedbackBody: Record<string, never>
    SendUpgradeSurveyBody: Record<string, never>
    SettingsResponse: Record<string, never>
    SetUpReadReplicaBody: {
      /**
       * @description Region you want your read replica to reside in
       * @example us-east-1
       * @enum {string}
       */
      read_replica_region:
        | 'us-east-1'
        | 'us-east-2'
        | 'us-west-1'
        | 'us-west-2'
        | 'ap-east-1'
        | 'ap-southeast-1'
        | 'ap-northeast-1'
        | 'ap-northeast-2'
        | 'ap-southeast-2'
        | 'eu-west-1'
        | 'eu-west-2'
        | 'eu-west-3'
        | 'eu-north-1'
        | 'eu-central-1'
        | 'eu-central-2'
        | 'ca-central-1'
        | 'ap-south-1'
        | 'sa-east-1'
    }
    SignUpBody: Record<string, never>
    SslEnforcementRequest: Record<string, never>
    SystemCreateProjectBody: {
      /** @description Database password */
      db_pass: string
      /** @description Name of your project, should not contain dots */
      name: string
      /** @description Slug of your organization */
      organization_id: string
      /**
       * @description Subscription Plan
       * @example free
       * @enum {string}
       */
      plan: 'free' | 'pro'
      /**
       * @description Region you want your server to reside in
       * @example us-east-1
       * @enum {string}
       */
      region:
        | 'us-east-1'
        | 'us-east-2'
        | 'us-west-1'
        | 'us-west-2'
        | 'ap-east-1'
        | 'ap-southeast-1'
        | 'ap-northeast-1'
        | 'ap-northeast-2'
        | 'ap-southeast-2'
        | 'eu-west-1'
        | 'eu-west-2'
        | 'eu-west-3'
        | 'eu-north-1'
        | 'eu-central-1'
        | 'eu-central-2'
        | 'ca-central-1'
        | 'ap-south-1'
        | 'sa-east-1'
    }
    SystemDatabaseResponse: {
      /** @description Database host */
      host: string
      /** @description Database version */
      version: string
    }
    SystemProjectResponse: {
      /**
       * @description Creation timestamp
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string
      database?: components['schemas']['SystemDatabaseResponse']
      /** @description Id of your project */
      id: string
      /** @description Name of your project */
      name: string
      /** @description Slug of your organization */
      organization_id: string
      /**
       * @description Region of your project
       * @example us-east-1
       */
      region: string
    }
    TelemetryEventBodyV2: Record<string, never>
    TelemetryGroupsIdentityBody: Record<string, never>
    TelemetryGroupsResetBody: Record<string, never>
    TelemetryIdentifyBodyV2: Record<string, never>
    TelemetryPageBodyV2: Record<string, never>
    TelemetryPageLeaveBody: Record<string, never>
    TransferOrganizationBody: Record<string, never>
    TransferProjectBody: Record<string, never>
    UnpauseProjectBody: {
      postgres_engine: components['schemas']['PostgresEngine']
      release_channel: components['schemas']['ReleaseChannel']
    }
    UpdateAddonAdminBody: {
      addon_type: components['schemas']['ProjectAddonType']
      addon_variant: components['schemas']['AddonVariantId']
    }
    UpdateAddonBody: {
      addon_type: components['schemas']['ProjectAddonType']
      addon_variant: components['schemas']['AddonVariantId']
    }
    UpdateApiKeyBody: Record<string, never>
    UpdateAuthConfigBody: Record<string, never>
    UpdateBackendParams: Record<string, never>
    UpdateBranchBody: Record<string, never>
    UpdateColumnBody: Record<string, never>
    UpdateContentBody: Record<string, never>
    UpdateContentFolderBody: Record<string, never>
    UpdateCustomHostnameBody: Record<string, never>
    UpdateFunctionBody: Record<string, never>
    UpdateGitHubConnectionsBody: Record<string, never>
    UpdateGoTrueConfigBody: Record<string, never>
    UpdateGoTrueConfigHooksBody: Record<string, never>
    UpdateMemberBody: Record<string, never>
    UpdateMemberRoleBody: Record<string, never>
    UpdateNotificationBodyV2: Record<string, never>
    UpdateNotificationsBodyV1: Record<string, never>
    UpdateOrganizationBody: Record<string, never>
    UpdatePasswordBody: Record<string, never>
    UpdatePgbouncerConfigBody: {
      default_pool_size: number
      max_client_conn: number
    }
    UpdatePgsodiumConfigBody: Record<string, never>
    UpdatePolicyBody: Record<string, never>
    UpdatePostgresConfigBody: {
      effective_cache_size: string
      logical_decoding_work_mem: string
      maintenance_work_mem: string
      max_connections: number
      max_locks_per_transaction: number
      max_parallel_maintenance_workers: number
      max_parallel_workers: number
      max_parallel_workers_per_gather: number
      max_replication_slots: number
      max_slot_wal_keep_size: string
      max_standby_archive_delay: string
      max_standby_streaming_delay: string
      max_wal_senders: number
      max_wal_size: string
      max_worker_processes: number
      shared_buffers: string
      statement_timeout: string
      wal_keep_size: string
      wal_sender_timeout: string
      work_mem: string
    }
    UpdatePostgrestConfigBody: {
      db_pool: number
      max_rows: number
    }
    UpdateProfileBody: Record<string, never>
    UpdateProjectBody: Record<string, never>
    UpdateProviderBody: Record<string, never>
    UpdatePublicationBody: Record<string, never>
    UpdateRestrictionsBody: Record<string, never>
    UpdateRoleBody: Record<string, never>
    UpdateSchemaBody: Record<string, never>
    UpdateSecretsConfigBody: Record<string, never>
    UpdateStorageBucketBody: Record<string, never>
    UpdateStorageConfigBody: Record<string, never>
    UpdateSubscriptionBody: Record<string, never>
    UpdateSubscriptionV2AdminBody: Record<string, never>
    UpdateSupavisorConfigBody: {
      default_pool_size: number
      /**
       * @deprecated
       * @description This field is deprecated and is ignored in this request
       */
      pool_mode: string
    }
    UpdateTableBody: Record<string, never>
    UpdateTriggerBody: Record<string, never>
    UpdateUserBody: Record<string, never>
    UpdateVercelConnectionsBody: Record<string, never>
    UpgradeDatabaseBody: {
      release_channel: components['schemas']['ReleaseChannel']
    }
    UpsertContentBody: Record<string, never>
    UpsertContentBodyV2: Record<string, never>
    UserBody: Record<string, never>
    V1CreateFunctionBody: {
      body: string
      name: string
      slug: string
      verify_jwt?: boolean
    }
    V1CreateProjectBody: {
      /** @description Database password */
      db_pass: string
      desired_instance_size: components['schemas']['DesiredInstanceSize']
      /**
       * @deprecated
       * @description This field is deprecated and is ignored in this request
       */
      kps_enabled: boolean
      /** @description Name of your project, should not contain dots */
      name: string
      /** @description Slug of your organization */
      organization_id: string
      /**
       * @deprecated
       * @description Subscription Plan is now set on organization level and is ignored in this request
       * @example free
       * @enum {string}
       */
      plan: 'free' | 'pro'
      postgres_engine: components['schemas']['PostgresEngine']
      /**
       * @description Region you want your server to reside in
       * @example us-east-1
       * @enum {string}
       */
      region:
        | 'us-east-1'
        | 'us-east-2'
        | 'us-west-1'
        | 'us-west-2'
        | 'ap-east-1'
        | 'ap-southeast-1'
        | 'ap-northeast-1'
        | 'ap-northeast-2'
        | 'ap-southeast-2'
        | 'eu-west-1'
        | 'eu-west-2'
        | 'eu-west-3'
        | 'eu-north-1'
        | 'eu-central-1'
        | 'eu-central-2'
        | 'ca-central-1'
        | 'ap-south-1'
        | 'sa-east-1'
      release_channel: components['schemas']['ReleaseChannel']
      /**
       * @description Template URL used to create the project from the CLI.
       * @example https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
       */
      template_url: string
    }
    V1DatabaseResponse: {
      /** @description Database host */
      host: string
      /** @description Database engine */
      postgres_engine: string
      /** @description Release channel */
      release_channel: string
      /** @description Database version */
      version: string
    }
    V1ProjectResponse: {
      /**
       * @description Creation timestamp
       * @example 2023-03-29T16:32:59Z
       */
      created_at: string
      database?: components['schemas']['V1DatabaseResponse']
      /** @description Id of your project */
      id: string
      /** @description Name of your project */
      name: string
      /** @description Slug of your organization */
      organization_id: string
      /**
       * @description Region of your project
       * @example us-east-1
       */
      region: string
    }
    V1RestorePitrBody: Record<string, never>
    V1RunQueryBody: Record<string, never>
    V1ServiceHealthResponse: {
      info:
        | components['schemas']['AuthHealthResponse']
        | components['schemas']['RealtimeHealthResponse']
    }
    V1UpdateFunctionBody: {
      body?: string
      name?: string
      verify_jwt?: boolean
    }
    ValidateQueryBody: Record<string, never>
    VanitySubdomainBody: Record<string, never>
    WalVerificationReportBody: Record<string, never>
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Redirects to Supabase dashboard after completing Fly sso */
  CallbackController_redirectToDashboardFlyioExtensionScreen: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Creates a database */
  FlyExtensionsController_provisionResource: {
    requestBody: {
      content: {
        'application/json': components['schemas']['FlyResourceProvisioningBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Gets database status */
  ExtensionController_getResourceStatus: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Deletes a database */
  ExtensionController_deleteResource: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Starts Fly single sign on */
  ExtensionController_startFlyioSSO: {
    parameters: {
      path: {
        extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Checks database provisioning eligibility */
  FlyExtensionsController_checkEligibility: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ResourceProvisioningEligibilityBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Gets details of the organization linked to the provided Fly organization id */
  FlyOrganizationsController_getOrganization: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets all databases that belong to the given Fly organization id */
  FlyOrganizationsController_getOrgExtensions: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Starts Fly single sign on */
  FlyOrganizationsController_startFlyioSSO: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Updates organization subscription linked to the provided Fly organization id */
  FlyOrganizationsController_updateOrganization: {
    parameters: {
      path: {
        organization_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FlyUpdateOrganizationSubscriptionBody']
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Redirects to Supabase dashboard after completing Vercel sso flow */
  CallbackController_redirectToDashboardVercelExtensionScreen: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets the set of billing plans available to a specific Installation */
  InstallationsController_getInstallation: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Upserts an installation for the account with installation_id */
  InstallationsController_createInstallation: {
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Deletes the installation with provided installation_id */
  InstallationsController_deleteInstallation: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Updates an installation for the account with installation_id */
  InstallationsController_updateInstallation: {
    responses: {
      204: {
        content: never
      }
    }
  }
  /** Gets the set of billing plans available to a specific Installation */
  InstallationsController_getInstallationBillingPlans: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Lists all resources */
  ResourcesController_listResources: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Provisions a resource */
  ResourcesController_createResource: {
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Fetches a resource by resource_id */
  ResourcesController_getResource: {
    parameters: {
      path: {
        resource_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Uninstalls and de-provisions a resource */
  ResourcesController_deleteResource: {
    parameters: {
      path: {
        resource_id: string
      }
    }
    responses: {
      204: {
        content: never
      }
    }
  }
  /** Updates a resource */
  ResourcesController_updateResource: {
    parameters: {
      path: {
        resource_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Returns the set of billing plans available to a specific resource */
  ResourcesController_getResourcePlans: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Return quotes for different billing plans for a specific product */
  ProductsController_listResources: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets GoTrue config */
  GoTrueConfigController_getGoTrueConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve GoTrue config */
      500: {
        content: never
      }
    }
  }
  /** Updates GoTrue config */
  GoTrueConfigController_updateGoTrueConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGoTrueConfigBody']
      }
    }
    responses: {
      /** @description Failed to update GoTrue config */
      500: {
        content: never
      }
    }
  }
  /** Updates GoTrue config hooks */
  GoTrueConfigController_updateGoTrueConfigHooks: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGoTrueConfigHooksBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update GoTrue config hooks */
      500: {
        content: never
      }
    }
  }
  /** Sends an invite to the given email */
  AuthInviteController_sendInvite: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send an invite to the given email */
      500: {
        content: never
      }
    }
  }
  /** Sends a magic link to the given email */
  MagicLinkController_sendMagicLink: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send a magic link to the given email */
      500: {
        content: never
      }
    }
  }
  /** Sends an OTP to the given phone number */
  OtpController_sendOtp: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send an OTP to the given phone number */
      500: {
        content: never
      }
    }
  }
  /** Sends a recovery email to the given email */
  RecoverController_sendRecover: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to send a recovery email to the given email */
      500: {
        content: never
      }
    }
  }
  /** Gets GoTrue template */
  TemplateController_getTemplate: {
    responses: {
      /** @description Failed to retrieve GoTrue template */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets users
   * @deprecated
   */
  UsersController_getUsers: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve users */
      500: {
        content: never
      }
    }
  }
  /** Creates user */
  UsersController_createUser: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create user */
      500: {
        content: never
      }
    }
  }
  /**
   * Delete user with given ID
   * @deprecated
   */
  UsersController_deleteUser: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete user */
      500: {
        content: never
      }
    }
  }
  /** Delete user with given ID */
  UsersController_deleteUserById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete user */
      500: {
        content: never
      }
    }
  }
  /** Updates user with given ID */
  UsersController_updateUserById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update user with given ID */
      500: {
        content: never
      }
    }
  }
  /** Delete all factors associated to a user */
  FactorsController_deleteFactors: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete factors */
      500: {
        content: never
      }
    }
  }
  /** Create CLI login session */
  CliLoginController_createCliLoginSession: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCliLoginSessionBody']
      }
    }
    responses: {
      /** @description Failed to create CLI login session */
      500: {
        content: never
      }
    }
  }
  /** Retrieve CLI login session */
  CliLoginController_getCliLoginSession: {
    responses: {
      /** @description Failed to retrieve CLI login session */
      500: {
        content: never
      }
    }
  }
  /** Gets project backups */
  BackupsController_getBackups: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project backups */
      500: {
        content: never
      }
    }
  }
  /** Download project backup */
  BackupsController_downloadBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadBackupBody']
      }
    }
    responses: {
      /** @description Failed to download project backup */
      500: {
        content: never
      }
    }
  }
  /** Gets backups that might be downloadable, but potentially not restorable. */
  BackupsController_getDownloadableBackups: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project backups */
      500: {
        content: never
      }
    }
  }
  /** Enable usage of physical backups */
  BackupsController_enablePhysicalBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to enable usage of physical backups */
      500: {
        content: never
      }
    }
  }
  /** Restore project to a previous point in time */
  BackupsController_restorePointInTimeBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PointInTimeRestoreBody']
      }
    }
    responses: {
      /** @description Failed to restore project to a previous point in time */
      500: {
        content: never
      }
    }
  }
  /** Restore project backup */
  BackupsController_restoreBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestoreLogicalBackupBody']
      }
    }
    responses: {
      /** @description Failed to restore project backup */
      500: {
        content: never
      }
    }
  }
  /** Restore project with a physical backup */
  BackupsController_restorePhysicalBackup: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestorePhysicalBackupBody']
      }
    }
    responses: {
      /** @description Failed to restore project with physical backup */
      500: {
        content: never
      }
    }
  }
  /** Enables Database Webhooks on the project */
  HooksController_enableHooks: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to enable Database Webhooks on the project */
      500: {
        content: never
      }
    }
  }
  /** Gets hook logs with the given ID */
  HooksController_getHookLogs: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get hook logs with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Send feedback on docs */
  SendDocsFeedbackController_sendDocsFeedback: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendDocsFeedbackBody']
      }
    }
    responses: {
      /** @description Failed to send feedback for docs */
      500: {
        content: never
      }
    }
  }
  /** Send exit survey to HubSpot */
  SendExitSurveyController_sendExitSurvey: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendExitSurveyBody']
      }
    }
    responses: {
      /** @description Failed to send exit survey */
      500: {
        content: never
      }
    }
  }
  /** Send feedback */
  SendFeedbackController_sendFeedback: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendFeedbackBody']
      }
    }
    responses: {
      /** @description Failed to send feedback */
      500: {
        content: never
      }
    }
  }
  /** Send upgrade survey to survey_responses table */
  SendUpgradeSurveyController_sendUpgradeSurvey: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SendUpgradeSurveyBody']
      }
    }
    responses: {
      /** @description Failed to send upgrade survey */
      500: {
        content: never
      }
    }
  }
  /** Gets user's integrations */
  IntegrationsController_getUserInstallations: {
    parameters: {
      query: {
        /** @description Filter results by integration name. Optional */
        integration_name: unknown
      }
    }
    responses: {
      /** @description Failed to get user's integrations */
      500: {
        content: never
      }
    }
  }
  /** Gets integration with the given organization slug */
  IntegrationsController_getUserInstallationForOrg: {
    parameters: {
      path: {
        slug: string
      }
    }
    responses: {
      /** @description Failed to get integration with the given organization slug */
      500: {
        content: never
      }
    }
  }
  /** Get GitHub authorization */
  GitHubAuthorizationsController_getGitHubAuthorization: {
    responses: {
      /** @description Failed to get GitHub authorization */
      500: {
        content: never
      }
    }
  }
  /** Create GitHub authorization */
  GitHubAuthorizationsController_createGitHubAuthorization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubAuthorizationBody']
      }
    }
    responses: {
      /** @description Failed to create GitHub authorization */
      500: {
        content: never
      }
    }
  }
  /** List GitHub connection branches */
  GitHubBranchesController_listConnectionBranches: {
    responses: {
      /** @description Failed to list GitHub connection branches */
      500: {
        content: never
      }
    }
  }
  /** Get GitHub connection branch */
  GitHubBranchesController_getConnectionBranch: {
    responses: {
      /** @description Failed to get GitHub connection branch */
      500: {
        content: never
      }
    }
  }
  /** List organization GitHub connections */
  GitHubConnectionsController_listOrganizationGitHubConnections: {
    responses: {
      /** @description Failed to list organization GitHub connections */
      500: {
        content: never
      }
    }
  }
  /** Connects a GitHub project to a supabase project */
  GitHubConnectionsController_createGitHubConnection: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to create project connections */
      500: {
        content: never
      }
    }
  }
  /** Deletes github project connection */
  GitHubConnectionsController_deleteGitHubConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to delete github integration project connection */
      500: {
        content: never
      }
    }
  }
  /** Updates a GitHub connection for a supabase project */
  GitHubConnectionsController_updateGitHubConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGitHubConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to update GitHub connection */
      500: {
        content: never
      }
    }
  }
  /** Gets GitHub repositories for user */
  GitHubRepositoriesController_listRepositories: {
    responses: {
      /** @description Failed to get GitHub repositories for user */
      500: {
        content: never
      }
    }
  }
  /**
   * Create vercel integration
   * @description Exchanges a vercel code for an access token and saves the access token to the new integration record
   */
  VercelIntegrationController_createVercelIntegration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelIntegrationBody']
      }
    }
    responses: {
      /** @description Failed to create vercel integration */
      500: {
        content: never
      }
    }
  }
  /** Removes Vercel organization integration with the given id */
  VercelIntegrationController_removeVercelIntegration: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to remove Vercel organization integration with the given id */
      500: {
        content: never
      }
    }
  }
  /** Connects a Vercel project to a supabase project */
  VercelConnectionsController_createVercelConnection: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to create project connection */
      500: {
        content: never
      }
    }
  }
  /** Deletes vercel project connection */
  VercelConnectionsController_deleteVercelConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to delete vercel integration project connection */
      500: {
        content: never
      }
    }
  }
  /** Updates a Vercel connection for a supabase project */
  VercelConnectionsController_updateVercelConnection: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVercelConnectionsBody']
      }
    }
    responses: {
      /** @description Failed to update Vercel connection */
      500: {
        content: never
      }
    }
  }
  /** Syncs supabase project envs with given connection id */
  VercelConnectionsController_syncVercelConnectionEnvironments: {
    parameters: {
      path: {
        connection_id: string
      }
    }
    responses: {
      /** @description Failed to sync supabase project envs with given connection id */
      500: {
        content: never
      }
    }
  }
  /** Gets installed vercel project connections for the given organization integration */
  VercelConnectionsController_getVercelConnections: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get installed vercel connections for the given organization integration */
      500: {
        content: never
      }
    }
  }
  /** Gets vercel projects with the given organization integration id */
  VercelProjectController_getVercelProjects: {
    parameters: {
      path: {
        organization_integration_id: string
      }
    }
    responses: {
      /** @description Failed to get vercel projects with the given organization integration id */
      500: {
        content: never
      }
    }
  }
  /** Get notifications */
  NotificationsController_getNotificationsV2: {
    responses: {
      /** @description Failed to retrieve notifications */
      500: {
        content: never
      }
    }
  }
  /** Delete notifications */
  NotificationsController_deleteNotifications: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationsBodyV1']
      }
    }
    responses: {
      /** @description Failed to delete notifications */
      500: {
        content: never
      }
    }
  }
  /** Update notifications */
  NotificationsController_updateNotificationsV2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationBodyV2'][]
      }
    }
    responses: {
      /** @description Failed to update notifications */
      500: {
        content: never
      }
    }
  }
  /** Archives all notifications */
  NotificationsController_archiveAllNotifications: {
    responses: {
      /** @description Failed to archive all notifications */
      500: {
        content: never
      }
    }
  }
  /** Get an aggregated data of interest across all notifications for the user */
  NotificationsController_getNotificationsSummary: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** [Beta] Get oauth app authorization request */
  OAuthAuthorizationsController_getAuthorizationRequest: {
    parameters: {
      path: {
        /** @description Oauth authorization id */
        id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets user's organizations */
  OrganizationsController_getOrganizations: {
    responses: {
      /** @description Failed to retrieve user's organizations */
      500: {
        content: never
      }
    }
  }
  /** Creates an organization */
  OrganizationsController_createOrganizationWithTier: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationBody']
      }
    }
    responses: {
      /** @description Unexpected error creating an organization */
      500: {
        content: never
      }
    }
  }
  /** Deletes organization */
  OrganizationSlugController_deleteOrganization: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete organization */
      500: {
        content: never
      }
    }
  }
  /** Updates organization */
  OrganizationSlugController_updateOrganization: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOrganizationBody']
      }
    }
    responses: {
      /** @description Failed to update organization */
      500: {
        content: never
      }
    }
  }
  /** Gets an organization's audit logs */
  OrgAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description Start timestamp */
        iso_timestamp_start?: string
        /** @description End timestamp */
        iso_timestamp_end?: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get an organization's audit logs */
      500: {
        content: never
      }
    }
  }
  /** Retrieves a list of available Postgres versions available to the organization */
  OrganizationSlugController_getAvailableImageVersions: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationSlugAvailableVersionsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to determine available Postgres versions */
      500: {
        content: never
      }
    }
  }
  /** Gets invoices for the given organization */
  OrgInvoicesController_getInvoices: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve invoices */
      500: {
        content: never
      }
    }
  }
  /** Gets the total count of invoices for the given organization */
  OrgInvoicesController_countInvoices: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      200: {
        headers: {
          /** @description total count value */
          'X-Total-Count'?: number
        }
        content: never
      }
      403: {
        content: never
      }
      /** @description Failed to retrieve the total count of invoices */
      500: {
        content: never
      }
    }
  }
  /** Gets invoice with the given invoice ID */
  OrgInvoicesController_getInvoice: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve invoice */
      500: {
        content: never
      }
    }
  }
  /** Gets the upcoming invoice */
  OrgInvoicesController_getUpcomingInvoice: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve upcoming invoice */
      500: {
        content: never
      }
    }
  }
  /** Gets subscription Plans */
  OrgPlansController_getAvailablePlans: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get subscription Plans */
      500: {
        content: never
      }
    }
  }
  /** Gets the current subscription */
  SubscriptionController_getSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve subscription */
      500: {
        content: never
      }
    }
  }
  /** Updates subscription */
  SubscriptionController_updateSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update subscription change */
      500: {
        content: never
      }
    }
  }
  /** Preview subscription changes */
  SubscriptionController_previewSubscriptionChange: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to preview subscription changes */
      500: {
        content: never
      }
    }
  }
  /** Gets the Stripe customer */
  CustomerController_getCustomer: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve the Stripe customer */
      500: {
        content: never
      }
    }
  }
  /** Updates the billing customer */
  updateCustomerV2: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BillingCustomerUpdateBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update the billing customer */
      500: {
        content: never
      }
    }
  }
  /** Gets daily organization stats */
  OrgDailyStatsController_getDailyStats: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get daily organization stats */
      500: {
        content: never
      }
    }
  }
  /** Gets daily organization stats for compute */
  OrgDailyStatsController_getDailyStatsCompute: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get daily organization stats for compute */
      500: {
        content: never
      }
    }
  }
  /** Get SOC2 Type 2 report URL */
  OrgDocumentsController_getSoc2Type2ReportUrl: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Get standard security questionnaire URL */
  OrgDocumentsController_getStandardSecurityQuestionnaireUrl: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets organization's members */
  MembersController_getMembers: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve organization's members */
      500: {
        content: never
      }
    }
  }
  /** Removes organization member */
  MembersController_deleteMember: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to remove organization member */
      500: {
        content: never
      }
    }
  }
  /** Assign organization member with new role */
  MembersController_assignMemberRoleV2: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignMemberRoleBodyV2']
      }
    }
    responses: {
      /** @description Failed to assign organization member with new role */
      500: {
        content: never
      }
    }
  }
  /** Update organization member role */
  MembersController_UpdateMemberRole: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMemberRoleBody']
      }
    }
    responses: {
      /** @description Failed to update organization member role */
      500: {
        content: never
      }
    }
  }
  /** Removes organization member role */
  MembersController_deleteMemberRole: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to remove organization member role */
      500: {
        content: never
      }
    }
  }
  /** Gets organization invitations */
  InvitationsController_getAllInvitations: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get organization invitations */
      500: {
        content: never
      }
    }
  }
  /** Creates organization invitation */
  InvitationsController_createInvitation: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInvitationBody']
      }
    }
    responses: {
      /** @description Failed to create organization invitation */
      500: {
        content: never
      }
    }
  }
  /** Deletes organization invitation with given id */
  InvitationsController_deleteInvitation: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to delete organization invitation with given id */
      500: {
        content: never
      }
    }
  }
  /** Gets organization invitation by token */
  InvitationsController_getInvitationByToken: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get organization invitation by token */
      500: {
        content: never
      }
    }
  }
  /** Accepts organization invitation by token */
  InvitationsController_acceptInvitationByToken: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to accept organization invitation by token */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets invited users
   * @deprecated
   */
  OrganizationInviteController_getInvitedUsers: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get invited users */
      500: {
        content: never
      }
    }
  }
  /**
   * Invites user
   * @deprecated
   */
  OrganizationInviteController_inviteUser: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['InviteUserBody']
      }
    }
    responses: {
      /** @description Failed to invite user */
      500: {
        content: never
      }
    }
  }
  /**
   * Delete invited user
   * @deprecated
   */
  OrganizationInviteController_deleteInvitedUser: {
    parameters: {
      query: {
        invited_id: number
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to delete invited user */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets invite
   * @deprecated
   */
  JoinController_getInvite: {
    parameters: {
      query: {
        token: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get invite */
      500: {
        content: never
      }
    }
  }
  /**
   * Joins organization
   * @deprecated
   */
  JoinController_joinOrganization: {
    parameters: {
      query: {
        token: string
      }
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to join organization */
      500: {
        content: never
      }
    }
  }
  /** Gets organization members who have reached their free project limit */
  ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve organization members who have reached their free project limit */
      500: {
        content: never
      }
    }
  }
  /** List published or authorized oauth apps */
  OAuthAppsController_listOAuthApps: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Create an oauth app */
  OAuthAppsController_createOAuthApp: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOAuthAppBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Update an oauth app */
  OAuthAppsController_updateOAuthApp: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOAuthAppBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Remove a published oauth app */
  OAuthAppsController_removeOAuthApp: {
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Revoke an authorized oauth app */
  OAuthAppsController_revokeAuthorizedOAuthApp: {
    responses: {
      403: {
        content: never
      }
    }
  }
  /** [Beta] Approve oauth app authorization request */
  OrganizationOAuthAuthorizationsController_approveAuthorizationRequest: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
        /** @description Oauth authorization id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** [Beta] Decline oauth app authorization request */
  OrganizationOAuthAuthorizationsController_declineAuthorizationRequest: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
        /** @description Oauth authorization id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Gets Stripe payment methods for the given organization */
  getPaymentMethodsV2: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get Stripe payment methods */
      500: {
        content: never
      }
    }
  }
  /** Detach payment method with the given card ID */
  PaymentsController_detachPaymentMethod: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DetachPaymentMethodBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to detach Stripe payment method */
      500: {
        content: never
      }
    }
  }
  /** Mark given payment method as default for organization */
  PaymentsController_markPaymentMethodAsDefault: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MarkDefaultPaymentMethodBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to mark payment method as default */
      500: {
        content: never
      }
    }
  }
  /** Sets up a payment method */
  SetupIntentOrgController_setUpPaymentMethod: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HCaptchaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to set up a payment method */
      500: {
        content: never
      }
    }
  }
  /** Gets all projects for the given organization */
  OrganizationProjectsController_getProjects: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve projects */
      500: {
        content: never
      }
    }
  }
  /** Gets the given organization's roles */
  OrganizationRolesController_getAllRolesV2: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve the organization's roles */
      500: {
        content: never
      }
    }
  }
  /** Gets the given organization's tax ID */
  TaxIdsController_getTaxId: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve the organization's tax ID */
      500: {
        content: never
      }
    }
  }
  /** Creates or updates a tax ID for the given organization */
  TaxIdsController_updateTaxId: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTaxIdBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create the tax ID */
      500: {
        content: never
      }
    }
  }
  /** Delete the tax ID with the given ID */
  TaxIdsController_deleteTaxId: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete the tax ID */
      500: {
        content: never
      }
    }
  }
  /** Transfers the organization to the given member */
  TransferController_transferOrganization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferOrganizationBody']
      }
    }
    responses: {
      /** @description Failed to update owner */
      500: {
        content: never
      }
    }
  }
  /** Gets usage stats */
  OrgUsageController_getOrgUsage: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get usage stats */
      500: {
        content: never
      }
    }
  }
  /** Gets organization linked to fly organization id */
  OrganizationsController_getOrganizationByFlyOrganizationId: {
    parameters: {
      path: {
        fly_organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Retrieve column privileges */
  ColumnPrivilegesController_getColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve column privileges */
      500: {
        content: never
      }
    }
  }
  /** Grant column privileges */
  ColumnPrivilegesController_grantColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GrantColumnPrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to grant column privileges */
      500: {
        content: never
      }
    }
  }
  /** Revoke column privileges */
  ColumnPrivilegesController_revokeColumnPrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeColumnPrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to revoke column privileges */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.columns */
  ColumnsController_getColumns: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.columns */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.column */
  ColumnsController_createColumn: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.column */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.column with the given ID */
  ColumnsController_deleteColumn: {
    parameters: {
      query: {
        /** @description Column ID */
        id: unknown
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.column with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.column with the given ID */
  ColumnsController_updateColumn: {
    parameters: {
      query: {
        /** @description Column ID */
        id: unknown
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.column with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.extensions */
  ExtensionsController_getExtensions: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.extensions */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.extension */
  ExtensionsController_createExtension: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateExtensionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.extension */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.extension with the given ID */
  ExtensionsController_deleteExtension: {
    parameters: {
      query: {
        /** @description Extension ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.extension with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database foreign tables */
  ForeignTablesController_getForeignTables: {
    parameters: {
      query: {
        id: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database foreign tables */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.functions */
  FunctionsController_getFunctions: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.functions */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.function */
  FunctionsController_createFunction: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.function */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.function with the given ID */
  FunctionsController_deleteFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.function with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.function with the given ID */
  FunctionsController_updateFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.function with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database materialized views */
  MaterializedViewsController_getMaterializedViews: {
    parameters: {
      query: {
        id: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database materialized views */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.policies */
  PoliciesController_getPolicies: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.policies */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.policy */
  PoliciesController_createPolicy: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePolicyBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.policy */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.policy with the given ID */
  PoliciesController_deletePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.policy with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.policy with the given ID */
  PoliciesController_updatePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePolicyBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.policy with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.publications */
  PublicationsController_getPublications: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.publications */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.publications */
  PublicationsController_createPublication: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePublicationBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.publication */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.publication with the given ID */
  PublicationsController_deletePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.publication with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.publication with the given ID */
  PublicationsController_updatePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePublicationBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.publication with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Run sql query */
  QueryController_runQuery: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RunQueryBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to run sql query */
      500: {
        content: never
      }
    }
  }
  /** Format sql query */
  QueryController_formatQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FormatQueryBody']
      }
    }
    responses: {
      /** @description Failed to format sql query */
      500: {
        content: never
      }
    }
  }
  /** Validate sql query */
  QueryController_validateQuery: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateQueryBody']
      }
    }
    responses: {
      /** @description Failed to validate sql query */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.roles */
  RolesController_getRoles: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.roles */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.role */
  RolesController_createRole: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.role */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.role with the given ID */
  RolesController_deleteRole: {
    parameters: {
      query: {
        /** @description Role ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.role with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.role with the given ID */
  RolesController_updateRole: {
    parameters: {
      query: {
        /** @description Role ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.role with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.schemas */
  SchemasController_getSchemas: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.schemas */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.schema */
  SchemasController_createSchema: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSchemaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.schema */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.schema with the given ID */
  SchemasController_deleteSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.schema with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.schema with the given ID */
  SchemasController_updateSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSchemaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.schema with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Searches project pg.columns. Return maximum 50 results. */
  SearchController_searchColumns: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchColumnBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to search pg.columns */
      500: {
        content: never
      }
    }
  }
  /** Searches project pg.tables. Return maximum 50 results. */
  SearchController_searchTables: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to search pg.tables */
      500: {
        content: never
      }
    }
  }
  /** Retrieve table privileges */
  TablePrivilegesController_getTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve table privileges */
      500: {
        content: never
      }
    }
  }
  /** Grant table privileges */
  TablePrivilegesController_grantTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GrantTablePrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to grant table privileges */
      500: {
        content: never
      }
    }
  }
  /** Revoke table privileges */
  TablePrivilegesController_revokeTablePrivileges: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeTablePrivilegesBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to revoke table privileges */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.tables or pg.table with the given ID */
  TablesController_getTables: {
    parameters: {
      query: {
        /** @description Table ID */
        id?: string
        include_system_schemas: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.tables or pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.table */
  TablesController_createTable: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.table */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.table with the given ID */
  TablesController_deleteTable: {
    parameters: {
      query: {
        /** @description Table ID */
        id: number
        cascade: boolean
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.table with the given ID */
  TablesController_updateTable: {
    parameters: {
      query: {
        /** @description Table ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTableBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.table with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.triggers */
  TriggersController_getTriggers: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.triggers */
      500: {
        content: never
      }
    }
  }
  /** Creates project pg.trigger */
  TriggersController_createTrigger: {
    parameters: {
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTriggerBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create pg.trigger */
      500: {
        content: never
      }
    }
  }
  /** Deletes project pg.trigger with the given ID */
  TriggersController_deleteTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete pg.trigger with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Updates project pg.trigger with the given ID */
  TriggersController_updateTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTriggerBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update pg.trigger with the given ID */
      500: {
        content: never
      }
    }
  }
  /** Gets project pg.types */
  TypesController_getTypes: {
    parameters: {
      query: {
        included_schemas: string
        excluded_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get pg.types */
      500: {
        content: never
      }
    }
  }
  /** Retrieve database views */
  ViewsController_getViews: {
    parameters: {
      query: {
        id: string
        include_system_schemas: string
        included_schemas: string
        excluded_schemas: string
        limit: string
        offset: string
        include_columns: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve database views */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's profile */
  ProfileController_getProfile: {
    responses: {
      /** @description Failed to retrieve user's profile */
      500: {
        content: never
      }
    }
  }
  /** Creates user's profile */
  ProfileController_createProfile: {
    responses: {
      /** @description Failed to create user's profile */
      500: {
        content: never
      }
    }
  }
  /** Deletes user's profile */
  ProfileController_deleteProfile: {
    responses: {
      /** @description Forbidden action */
      403: {
        content: never
      }
      /** @description Failed to delete user's profile */
      500: {
        content: never
      }
    }
  }
  /** Updates user's profile */
  ProfileController_updateProfile: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProfileBody']
      }
    }
    responses: {
      /** @description Failed to update user's profile */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's access tokens */
  AccessTokensController_getAccessTokens: {
    responses: {
      /** @description Failed to get user's access tokens */
      500: {
        content: never
      }
    }
  }
  /** Creates a new access token */
  AccessTokensController_createAccessToken: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAccessTokenBody']
      }
    }
    responses: {
      /** @description Failed to create access token */
      500: {
        content: never
      }
    }
  }
  /** Gets the access token with the given ID */
  AccessTokensController_getAccessToken: {
    parameters: {
      path: {
        /** @description Access token ID */
        id: number
      }
    }
    responses: {
      /** @description Failed to get access token */
      500: {
        content: never
      }
    }
  }
  /** Deletes the access token with the given ID */
  AccessTokensController_deleteAccessToken: {
    parameters: {
      path: {
        /** @description Access token ID */
        id: number
      }
    }
    responses: {
      /** @description Failed to delete access token */
      500: {
        content: never
      }
    }
  }
  /** Gets a user's audit logs */
  UserAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description Start timestamp */
        iso_timestamp_start?: string
        /** @description End timestamp */
        iso_timestamp_end?: string
      }
    }
    responses: {
      /** @description Failed to get a user's audit logs */
      500: {
        content: never
      }
    }
  }
  /** Check password strength */
  PasswordCheckController_checkPassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordCheckBody']
      }
    }
    responses: {
      /** @description Failed to check password strength */
      500: {
        content: never
      }
    }
  }
  /** Gets all the user's permissions */
  PermissionsController_getPermissions: {
    responses: {
      /** @description Failed to retrieve permissions */
      500: {
        content: never
      }
    }
  }
  /** Search profiles by username, email with the given keywords */
  SearchProfileController_searchProfile: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchProfileBody']
      }
    }
    responses: {
      /** @description Failed to search profiles with the given keywords */
      500: {
        content: never
      }
    }
  }
  /** Gets the user's subscription statistics */
  SubscriptionsController_getSubscriptionsStatistics: {
    responses: {
      /** @description Failed to retrieve user's subscription statistics */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets all projects that belong to the authenticated user
   * @description Only returns the minimal project info
   */
  ProjectsController_getProjects: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Creates a project */
  ProjectsController_createProject: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /**
   * Gets resource warnings for all projects accessible by the user
   * @description Only returns the minimal project info
   */
  ProjectsResourceWarningsController_getProjectsResourceWarnings: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets a specific project that belongs to the authenticated user */
  ProjectsRefController_getProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Deletes the given project */
  ProjectsRefController_deleteProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Updates the given project */
  ProjectsRefController_updateProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project */
      500: {
        content: never
      }
    }
  }
  /** Gets a project's function invocation statistics */
  FunctionInvocationLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function invocation statistics */
      500: {
        content: never
      }
    }
  }
  /** Gets a project's function request statistics */
  FunctionRequestLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function request statistics */
      500: {
        content: never
      }
    }
  }
  /** Gets a project's function resource usage */
  FunctionResourceLogsController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's function resource usage */
      500: {
        content: never
      }
    }
  }
  /** Gets project's logs */
  LogsController_getApiPaths: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's logs */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage api counts */
  UsageApiController_getApiCounts: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project's usage api counts */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage api requests count */
  UsageApiController_getApiRequestsCount: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's usage api requests count */
      500: {
        content: never
      }
    }
  }
  /** Lists all log drains */
  LogDrainController_listLogDrains: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch log drains */
      500: {
        content: never
      }
    }
  }
  /** Create a log drain */
  LogDrainController_createLogDrain: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBackendParams']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create a log drain */
      500: {
        content: never
      }
    }
  }
  /** Update a log drain */
  LogDrainController_updateLogDrain: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Log drains token */
        token: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBackendParams']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update log drain */
      500: {
        content: never
      }
    }
  }
  /** Delete a log drain */
  LogDrainController_deleteLogDrain: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Log drains token */
        token: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete a log drain */
      500: {
        content: never
      }
    }
  }
  /** Lists project's warehouse access tokens from logflare */
  'v1-list-all-warehouse-tokens': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch warehouse access tokens */
      500: {
        content: never
      }
    }
  }
  /** Create a warehouse access token */
  'v1-create-a-warehouse-token': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create warehouse access token */
      500: {
        content: never
      }
    }
  }
  /** Delete a warehouse access token */
  'v1-delete-a-warehouse-token': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete warehouse access token */
      500: {
        content: never
      }
    }
  }
  /** Lists project's warehouse collections from logflare */
  'v1-list-all-warehouse-collections': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch warehouse collections */
      500: {
        content: never
      }
    }
  }
  /** Create a warehouse collection */
  'v1-create-a-warehouse-collection': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create warehouse collection */
      500: {
        content: never
      }
    }
  }
  /** Get a warehouse collection */
  'v1-get-a-warehouse-collection': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch warehouse collection */
      500: {
        content: never
      }
    }
  }
  /** Delete a warehouse collection */
  'v1-delete-a-warehouse-collection': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete warehouse collection */
      500: {
        content: never
      }
    }
  }
  /** Update a warehouse collection */
  'v1-update-a-warehouse-collection': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update warehouse collection */
      500: {
        content: never
      }
    }
  }
  /** Lists project's warehouse endpoints from logflare */
  'v1-list-all-warehouse-endpoints': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch warehouse endpoints */
      500: {
        content: never
      }
    }
  }
  /** Create a warehouse endpoint */
  'v1-create-a-warehouse-endpoint': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create warehouse endpoint */
      500: {
        content: never
      }
    }
  }
  /** Update a warehouse endpoint */
  'v1-update-a-warehouse-endpoint': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update warehouse endpoint */
      500: {
        content: never
      }
    }
  }
  /** Delete a warehouse endpoint */
  'v1-delete-a-warehouse-endpoint': {
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete warehouse endpoint */
      500: {
        content: never
      }
    }
  }
  /** Lists project's warehouse queries from logflare */
  'v1-list-all-warehouse-queries': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch warehouse queries */
      500: {
        content: never
      }
    }
  }
  /** Parses a warehouse query */
  'v1-parse-warehouse-query': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to parse warehouse query */
      500: {
        content: never
      }
    }
  }
  /** Gets project's warehouse tenant from logflare */
  'v1-provision-a-warehouse-tenant': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to fetch or provision warehouse tenant */
      500: {
        content: never
      }
    }
  }
  /** Queries project Graphql */
  ProjectsApiController_projectGraphql: {
    parameters: {
      header: {
        'x-graphql-authorization': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to query project Graphql */
      500: {
        content: never
      }
    }
  }
  /** Gets project OpenApi */
  ProjectsApiController_projectOpenApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project OpenApi */
      500: {
        content: never
      }
    }
  }
  /** Gets project addons */
  ProjectAddonController_getProjectAddons: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project addons */
      500: {
        content: never
      }
    }
  }
  /** Updates project addon */
  ProjectAddonController_updateAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAddonBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project addon */
      500: {
        content: never
      }
    }
  }
  /** Removes project addon */
  ProjectAddonController_removeAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        addon_variant: components['schemas']['AddonVariantId']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to remove project addon */
      500: {
        content: never
      }
    }
  }
  /** Gets project's pgbouncer config */
  PgbouncerConfigController_getPgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's pgbouncer config */
  PgbouncerConfigController_updatePgbouncerConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePgbouncerConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's pgbouncer status */
  PgbouncerConfigController_getPgbouncerStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's pgbouncer status */
      500: {
        content: never
      }
    }
  }
  /** Gets project's Postgres config */
  'v1-get-postgres-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's Postgres config */
  'v1-update-postgres-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgresConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's Postgres config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's postgrest config */
  PostgrestConfigController_getPostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's postgrest config */
  PostgrestConfigController_updatePostgRESTConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgrestConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's secrets config */
  SecretsConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSecretsConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's secrets config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's storage config */
  StorageConfigController_getConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's storage config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's storage config */
  StorageConfigController_updateConfig: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's storage config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's supavisor config */
  'v1-get-supavisor-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's supavisor config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's supavisor config */
  'v1-update-supavisor-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSupavisorConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's supavisor config */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets project's content
   * @deprecated
   */
  ContentController_getContent: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's content */
      500: {
        content: never
      }
    }
  }
  /** Updates project's content */
  ContentController_updateWholeContentV2: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertContentBodyV2']
      }
    }
    responses: {
      /** @description Failed to update project's content */
      500: {
        content: never
      }
    }
  }
  /** Creates project's content */
  ContentController_createContentV2: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContentBodyV2']
      }
    }
    responses: {
      /** @description Failed to create project's content */
      500: {
        content: never
      }
    }
  }
  /** Deletes project's contents */
  ContentController_deleteContents: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to delete project's contents */
      500: {
        content: never
      }
    }
  }
  /**
   * Updates project's content
   * @deprecated
   */
  ContentController_updateContent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContentBody']
      }
    }
    responses: {
      /** @description Failed to update project's content */
      500: {
        content: never
      }
    }
  }
  /** Gets the count of a user's content by type */
  ContentController_getContentCount: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve user's content count */
      500: {
        content: never
      }
    }
  }
  /** Gets project's content root folder */
  ContentFoldersController_getRootFolder: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's content root folder */
      500: {
        content: never
      }
    }
  }
  /** Creates project's content folder */
  ContentFoldersController_createFolder: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContentFolderBody']
      }
    }
    responses: {
      /** @description Failed to create project's content folder */
      500: {
        content: never
      }
    }
  }
  /** Deletes project's content folders */
  ContentFoldersController_DeleteFolder: {
    responses: {
      /** @description Failed to delete project's content folders */
      500: {
        content: never
      }
    }
  }
  /** Gets project's content folder */
  ContentFoldersController_getFolder: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Content folder id */
        id: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's content folder */
      500: {
        content: never
      }
    }
  }
  /** Updates project's content folder */
  ContentFoldersController_updateFolder: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Content folder id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContentFolderBody']
      }
    }
    responses: {
      /** @description Failed to update project's content folder */
      500: {
        content: never
      }
    }
  }
  /** Gets project's content by the given id */
  ContentController_getContentById: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Content id */
        id: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's content by the given id */
      500: {
        content: never
      }
    }
  }
  /** Gets daily project stats */
  DailyStatsController_getDailyStats: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get daily project stats */
      500: {
        content: never
      }
    }
  }
  /** Gets non-removed databases of a specified project */
  DatabasesController_getDatabases: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets statuses of databases within a project */
  DatabasesStatusesController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get statuses of databases of a project */
      500: {
        content: never
      }
    }
  }
  /** Updates the database password */
  DbPasswordController_updatePassword: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update database password */
      500: {
        content: never
      }
    }
  }
  /** Get database disk attributes */
  DiskController_getDisk: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get database disk attributes */
      500: {
        content: never
      }
    }
  }
  /** Modify database disk */
  DiskController_modifyDisk: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DiskRequestBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to modify database disk */
      500: {
        content: never
      }
    }
  }
  /** Get disk utilization */
  DiskController_getDiskUtilization: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get disk utilization */
      500: {
        content: never
      }
    }
  }
  /** Gets project's usage metrics */
  InfraMonitoringController_getUsageMetrics: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's usage metrics */
      500: {
        content: never
      }
    }
  }
  /** Gets project health check */
  HealthCheckController_projectHealthCheck: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project health check */
      500: {
        content: never
      }
    }
  }
  /** Gets non-removed databases of a specified project */
  LoadBalancersController_getLoadBalancers: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Pauses the project */
  PauseController_pauseProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to pause the project */
      500: {
        content: never
      }
    }
  }
  /** Gets the latest pause event for a project if a project is paused */
  PauseController_getProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Resize database disk */
  ResizeController_resizeDatabase: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResizeBody']
      }
    }
    responses: {
      /** @description Failed to resize database disk */
      500: {
        content: never
      }
    }
  }
  /** Restarts project */
  RestartController_restartProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestartProjectInfo']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to restart project */
      500: {
        content: never
      }
    }
  }
  /** Restarts given services */
  RestartServicesController_restartServices: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestartServicesBody']
      }
    }
    responses: {
      /** @description Failed to restart given services */
      500: {
        content: never
      }
    }
  }
  /** Unpauses project */
  UnpauseController_unpauseProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UnpauseProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to unpause project */
      500: {
        content: never
      }
    }
  }
  /** Cancels a failed restoration */
  UnpauseController_cancelProjectRestoration: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to cancel project restoration */
      500: {
        content: never
      }
    }
  }
  /** Retrieves versions to which a project can be restored */
  UnpauseController_getAvailableImageVersions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve available versions */
      500: {
        content: never
      }
    }
  }
  /** Run project lints */
  ProjectRunLintsController_runProjectLints: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Gets project's settings */
  SettingsController_getProjectApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ProjectSettingsResponse']
        }
      }
      /** @description Failed to retrieve project's settings */
      500: {
        content: never
      }
    }
  }
  /** Gets project's status */
  ProjectStatusController_getStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project's status */
      500: {
        content: never
      }
    }
  }
  /** Transfers a project to a different organization. */
  ProjectTransferController_transferProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Previews transfering a project to a different organizations, shows eligibility and impact. */
  ProjectTransferController_previewTransfer: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /**
   * Updates the project
   * @deprecated
   * @description Replaced by PATCH /platform/projects/:ref
   */
  UpdateController_updateProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project */
      500: {
        content: never
      }
    }
  }
  /** Gets project linked to fly extension id */
  ProjectsController_getProjectByFlyExtensionId: {
    parameters: {
      path: {
        fly_extension_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * Gets project's api info
   * @deprecated
   */
  ApiController_getProjectApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
      /** @description Failed to retrieve project's api info */
      500: {
        content: never
      }
    }
  }
  /** Gets the last JWT secret update status */
  JwtSecretUpdateStatusController_getJwtSecretUpdateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve JWT secret update status */
      500: {
        content: never
      }
    }
  }
  /**
   * Gets project's settings
   * @deprecated
   */
  PropsSettingsController_getProjectApi: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['SettingsResponse']
        }
      }
      /** @description Failed to retrieve project's settings */
      500: {
        content: never
      }
    }
  }
  /** Reset password for email */
  ResetPasswordController_resetPassword: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Sign up with email and password */
  SignUpController_signUp: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Get infrastructure status */
  StatusController_getStatus: {
    responses: {
      /** @description Failed to retrieve infrastructure status */
      500: {
        content: never
      }
    }
  }
  /** Gets project storage archive */
  StorageArchiveController_getArchive: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project storage archive */
      500: {
        content: never
      }
    }
  }
  /** Creates project storage archive */
  StorageArchiveController_createArchive: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to create project storage archive */
      500: {
        content: never
      }
    }
  }
  /** Gets list of buckets */
  StorageBucketsController_getBuckets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get list of buckets */
      500: {
        content: never
      }
    }
  }
  /** Create bucket */
  StorageBucketsController_createBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStorageBucketBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create bucket */
      500: {
        content: never
      }
    }
  }
  /** Gets bucket */
  StorageBucketIdController_getBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get bucket */
      500: {
        content: never
      }
    }
  }
  /** Deletes bucket */
  StorageBucketIdController_deleteBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete bucket */
      500: {
        content: never
      }
    }
  }
  /** Updates bucket */
  StorageBucketIdController_updateBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageBucketBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update bucket */
      500: {
        content: never
      }
    }
  }
  /** Removes all objects inside a single bucket. */
  StorageBucketIdController_emptyBucket: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to empty bucket */
      500: {
        content: never
      }
    }
  }
  /** Deletes objects */
  StorageObjectsController_deleteObjects: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteObjectsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete objects */
      500: {
        content: never
      }
    }
  }
  /** Copys object */
  StorageObjectsController_copyObject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CopyObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to copy object */
      500: {
        content: never
      }
    }
  }
  /** Downloads a file from a private bucket */
  StorageObjectsController_download: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to download the file */
      500: {
        content: never
      }
    }
  }
  /** Gets list of objects with the given bucket */
  StorageObjectsController_getObjects: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetObjectsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get list of objects with the given bucket */
      500: {
        content: never
      }
    }
  }
  /** Move object */
  StorageObjectsController_moveObject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveObjectBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to move object */
      500: {
        content: never
      }
    }
  }
  /** Creates URL for an asset in a public bucket */
  StorageObjectsController_createPublicUrl: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPublicUrlBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create public URL */
      500: {
        content: never
      }
    }
  }
  /** Creates a signed URL */
  StorageObjectsController_createSignedUrl: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create a signed URL */
      500: {
        content: never
      }
    }
  }
  /** Gets multiple signed URLs */
  StorageObjectsController_createSignedUrls: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage bucket id */
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlsBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get multiple signed URLs */
      500: {
        content: never
      }
    }
  }
  /** Gets project storage credentials */
  StorageS3CredentialsController_getAllCredentials: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project storage credentials */
      500: {
        content: never
      }
    }
  }
  /** Creates project storage credential */
  StorageS3CredentialsController_createCredential: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStorageCredentialBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project storage credential */
      500: {
        content: never
      }
    }
  }
  /** Deletes project storage credential */
  StorageS3CredentialsController_deleteCredential: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Storage credential id */
        id: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete project storage credential */
      500: {
        content: never
      }
    }
  }
  /** Gets information about overdue invoices that relate to the authenticated user */
  InvoicesController_getOverdueInvoices: {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Sets up a payment method */
  SetupIntentController_setUpPaymentMethod: {
    requestBody: {
      content: {
        'application/json': components['schemas']['HCaptchaBody']
      }
    }
    responses: {
      /** @description Failed to set up a payment method */
      500: {
        content: never
      }
    }
  }
  /** Sends analytics server event */
  TelemetryEventController_sendServerEventV2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryEventBodyV2']
      }
    }
    responses: {
      /** @description Failed to send analytics server event */
      500: {
        content: never
      }
    }
  }
  /** Send analytics group identify event */
  TelemetryGroupsController_groupIdentify: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryGroupsIdentityBody']
      }
    }
    responses: {
      /** @description Failed to send analytics group identify event */
      500: {
        content: never
      }
    }
  }
  /** Send analytics group reset event */
  TelemetryGroupsController_groupReset: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryGroupsResetBody']
      }
    }
    responses: {
      /** @description Failed to send analytics group reset event */
      500: {
        content: never
      }
    }
  }
  /** Send analytics identify event */
  TelemetryIdentifyController_identifyV2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryIdentifyBodyV2']
      }
    }
    responses: {
      /** @description Failed to send analytics identify event */
      500: {
        content: never
      }
    }
  }
  /** Send server page event */
  TelemetryPageController_sendServerPageV2: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageBodyV2']
      }
    }
    responses: {
      /** @description Failed to send server page event */
      500: {
        content: never
      }
    }
  }
  /** Send analytics page leave event */
  TelemetryPageLeaveController_pageLeave: {
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageLeaveBody']
      }
    }
    responses: {
      /** @description Failed to send analytics page leave event */
      500: {
        content: never
      }
    }
  }
  /** Reset analytics */
  TelemetryResetController_reset: {
    responses: {
      /** @description Failed to reset analytics */
      500: {
        content: never
      }
    }
  }
  /** Redirects to Fly sso flow */
  TermsOfServiceController_flyTosAccepted: {
    parameters: {
      query: {
        extension_id: string
        organization_id: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Gets the list of Vercel projects */
  VercelProjectsController_getVercelProjects: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    responses: {
      /** @description Failed to get projects */
      500: {
        content: never
      }
    }
  }
  /** Gets the Vercel project with the given ID */
  VercelProjectsController_getVercelProject: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    responses: {
      /** @description Failed to get project */
      500: {
        content: never
      }
    }
  }
  /** Gets the environment variables for the given project ID on behalf of the given team ID */
  VercelEnvironmentVariablesController_getEnvironmentVariables: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    responses: {
      /** @description Failed to get Vercel environment variables */
      500: {
        content: never
      }
    }
  }
  /** Creates the environment variable for the given project ID on behalf of the given team ID */
  VercelEnvironmentVariablesController_createEnvironmentVariable: {
    parameters: {
      header: {
        vercel_authorization: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelEnvironmentVariableBody']
      }
    }
    responses: {
      /** @description Failed to create Vercel environment variables */
      500: {
        content: never
      }
    }
  }
  /** Gets the Vercel redirect url */
  VercelRedirectController_getRedirectUrl: {
    parameters: {
      path: {
        installation_id: string
      }
    }
    responses: {
      /** @description Failed to get Vercel redirect url */
      500: {
        content: never
      }
    }
  }
  /** Gets the Vercel access token for the given code */
  VercelAccessTokenController_getAccessToken: {
    responses: {
      /** @description Failed to get Vercel access token */
      500: {
        content: never
      }
    }
  }
  /** Get a list of workflow runs */
  WorkflowRunController_listWorkflowRuns: {
    parameters: {
      query: {
        /** @description Branch ID */
        branch_id: string
        /** @description Project ref */
        project_ref: string
        offset: number
        limit: number
      }
    }
    responses: {
      /** @description Failed to list workflow runs */
      500: {
        content: never
      }
    }
  }
  /** Count the number of workflow runs for the given branch */
  WorkflowRunController_countWorkflowRuns: {
    parameters: {
      query: {
        /** @description Branch ID */
        branch_id: string
        /** @description Project ref */
        project_ref: string
      }
    }
    responses: {
      200: {
        headers: {
          /** @description total count value */
          'X-Total-Count'?: number
        }
        content: never
      }
      /** @description Failed to count workflow runs */
      500: {
        content: never
      }
    }
  }
  /** Get the logs of a workflow run */
  WorkflowRunController_getWorkflowRunLogs: {
    parameters: {
      path: {
        /** @description Workflow run ID */
        workflow_run_id: string
      }
    }
    responses: {
      200: {
        content: {
          'text/plain': string
        }
      }
      /** @description Failed to get workflow run logs */
      500: {
        content: never
      }
    }
  }
  /** Gets GoTrue template */
  SystemAuthTemplateController_getTemplate: {
    responses: {
      /** @description Failed to retrieve GoTrue template */
      500: {
        content: never
      }
    }
  }
  /** Updates the database password */
  DatabasePasswordController_updatePassword: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update database password */
      500: {
        content: never
      }
    }
  }
  /** Reset JWT if leaked keys found by GitHub secret scanning */
  GithubSecretAlertController_resetJwt: {
    parameters: {
      header: {
        'github-public-key-identifier': string
        'github-public-key-signature': string
      }
    }
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description Failed to reset JWT */
      500: {
        content: never
      }
    }
  }
  /** Get API health status */
  HealthController_getStatus: {
    responses: {
      /** @description Failed to retrieve API health status */
      500: {
        content: never
      }
    }
  }
  /** Processes GitHub event */
  GitHubWebhooksController_processEvent: {
    parameters: {
      header: {
        'x-github-delivery': string
        'x-hub-signature-256': string
      }
    }
    responses: {
      /** @description Failed to process GitHub event */
      500: {
        content: never
      }
    }
  }
  /** Processes Vercel event */
  VercelWebhooksController_processEvent: {
    parameters: {
      header: {
        'x-vercel-signature': string
      }
    }
    responses: {
      /** @description Failed to process Vercel event */
      500: {
        content: never
      }
    }
  }
  /** Syncs an invoice to Vercel. If already synced, Vercel will not process it again. */
  VercelSyncController_syncInvoice: {
    parameters: {
      query: {
        dryRun: boolean
      }
      path: {
        invoice_id: string
      }
    }
    responses: {
      /** @description Failed to sync invoice */
      500: {
        content: never
      }
    }
  }
  /** Processes Orb events */
  OrbWebhooksController_processEvent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      /** @description Failed to process Orb event */
      500: {
        content: never
      }
    }
  }
  /** Gets the current subscription */
  OrgSubscriptionSystemController_getSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to retrieve subscription */
      500: {
        content: never
      }
    }
  }
  /** Updates subscription */
  OrgSubscriptionSystemController_updateSubscription: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionV2AdminBody']
      }
    }
    responses: {
      /** @description Failed to update subscription */
      500: {
        content: never
      }
    }
  }
  /** Updates restriction status of an org */
  OrgRestrictionsSystemController_updateRestriction: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRestrictionsBody']
      }
    }
    responses: {
      /** @description Failed to update restriction status */
      500: {
        content: never
      }
    }
  }
  /** Gets usage stats */
  OrgUsageSystemController_getOrgUsage: {
    parameters: {
      path: {
        /** @description Organization slug */
        slug: string
      }
    }
    responses: {
      /** @description Failed to get usage stats */
      500: {
        content: never
      }
    }
  }
  /** Creates a partner organization */
  AwsPartnerOrganizationsSystemController_createPartnerOrganization: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAwsPartnerOrganizationBody']
      }
    }
    responses: {
      /** @description Unexpected error creating a partner organization */
      500: {
        content: never
      }
    }
  }
  /** Create a project */
  SystemProjectsController_createProject: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SystemCreateProjectBody']
      }
    }
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['SystemProjectResponse']
        }
      }
    }
  }
  /** Updates project addon */
  AddonsController_updateAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAddonAdminBody']
      }
    }
    responses: {
      /** @description Failed to update project addon */
      500: {
        content: never
      }
    }
  }
  /** Removes project addon */
  AddonsController_removeAddon: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        addon_variant: components['schemas']['AddonVariantId']
      }
    }
    responses: {
      /** @description Failed to remove project addon */
      500: {
        content: never
      }
    }
  }
  /** Handle update project jwt on completion */
  ProjectUpdateJwtController_completeUpdateJwt: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** Allows a project to obtain temporary credentials. */
  AwsCredentialsController_getTemporaryCredentials: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CredentialsRequestBody']
      }
    }
    responses: {
      /** @description Failed to obtain temporary credentials. */
      500: {
        content: never
      }
    }
  }
  /**
   * List all functions
   * @description Returns all functions you've previously added to the specified project.
   */
  'v1-list-all-functions': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's functions */
      500: {
        content: never
      }
    }
  }
  /**
   * Create a function
   * @description Creates a function and adds it to the specified project.
   */
  'v1-create-a-function': {
    parameters: {
      query?: {
        import_map_path?: string
        entrypoint_path?: string
        import_map?: boolean
        verify_jwt?: boolean
        name?: string
        slug?: string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['V1CreateFunctionBody']
        'application/vnd.denoland.eszip': components['schemas']['V1CreateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project's function */
      500: {
        content: never
      }
    }
  }
  /** Deletes all Edge Functions from a project */
  SystemFunctionsController_systemDeleteAllFunctions: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * Delete a function
   * @description Deletes a function with the specified slug from the specified project.
   */
  'v1-delete-a-function': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete function with given slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Update a function
   * @description Updates a function with the specified slug and project.
   */
  'v1-update-a-function': {
    parameters: {
      query?: {
        import_map_path?: string
        entrypoint_path?: string
        import_map?: boolean
        verify_jwt?: boolean
        name?: string
      }
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['V1UpdateFunctionBody']
        'application/vnd.denoland.eszip': components['schemas']['V1UpdateFunctionBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update function with given slug */
      500: {
        content: never
      }
    }
  }
  /** Records an HA event */
  HaEventsController_updateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventBody']
      }
    }
    responses: {
      /** @description Failed to record HA event. */
      500: {
        content: never
      }
    }
  }
  /** Updates a project's health status. */
  HealthReportingController_updateStatus: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReportStatusBody']
      }
    }
    responses: {
      /** @description Failed to update health status. */
      500: {
        content: never
      }
    }
  }
  /** Run project lints */
  SystemProjectRunLintsController_runProjectLints: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /**
   * List all secrets
   * @description Returns all secrets you've previously added to the specified project.
   */
  'v1-list-all-secrets': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk create secrets
   * @description Creates multiple secrets and adds them to the specified project.
   */
  'v1-bulk-create-secrets': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSecretBody'][]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to create project's secrets */
      500: {
        content: never
      }
    }
  }
  /**
   * Bulk delete secrets
   * @description Deletes all secrets with the given names from the specified project
   */
  'v1-bulk-delete-secrets': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete secrets with given names */
      500: {
        content: never
      }
    }
  }
  /** Refreshes secrets */
  SecretsRefreshController_refreshSecrets: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to refresh secrets */
      500: {
        content: never
      }
    }
  }
  /** Processes a project's WAL verification report. */
  WalVerificationReportingController_processWalVerification: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WalVerificationReportBody']
      }
    }
    responses: {
      /** @description Failed to update health status. */
      500: {
        content: never
      }
    }
  }
  /** Processes Stripe event */
  StripeWebhooksController_processEvent: {
    parameters: {
      header: {
        'stripe-signature': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      /** @description Failed to process Stripe event */
      500: {
        content: never
      }
    }
  }
  /**
   * Get metrics
   * @description At most 50 projects can be queried at a time.
   * Currently supports '1d', '3d', and '7d' intervals.
   */
  V0ProjectsMetricsController_getProjectsMetrics: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GetMetricsBody']
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * Get database branch config
   * @description Fetches configurations of the specified database branch
   */
  'v1-get-a-branch-config': {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    responses: {
      /** @description Failed to retrieve database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Delete a database branch
   * @description Deletes the specified database branch
   */
  'v1-delete-a-branch': {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    responses: {
      /** @description Failed to delete database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Update database branch config
   * @description Updates the configuration of the specified database branch
   */
  'v1-update-a-branch-config': {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBranchBody']
      }
    }
    responses: {
      /** @description Failed to update database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Resets a database branch
   * @description Resets the specified database branch
   */
  'v1-reset-a-branch': {
    parameters: {
      path: {
        /** @description Branch ID */
        branch_id: string
      }
    }
    responses: {
      /** @description Failed to reset database branch */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Authorize user through oauth */
  'v1-authorize-user': {
    responses: {
      303: {
        content: never
      }
    }
  }
  /** [Beta] Exchange auth code for user's access and refresh token */
  'v1-exchange-oauth-token': {
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': components['schemas']['OAuthTokenBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /**
   * List all organizations
   * @description Returns a list of organizations that you currently belong to.
   */
  'v1-list-all-organizations': {
    responses: {
      /** @description Unexpected error listing organizations */
      500: {
        content: never
      }
    }
  }
  /** Create an organization */
  'v1-create-an-organization': {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationBodyV1']
      }
    }
    responses: {
      /** @description Unexpected error creating an organization */
      500: {
        content: never
      }
    }
  }
  /** Gets information about the organization */
  'v1-get-an-organization': {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** List members of an organization */
  'v1-list-organization-members': {
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * List all projects
   * @description Returns a list of all projects you've previously created.
   */
  'v1-list-all-projects': {
    responses: {
      200: {
        content: never
      }
    }
  }
  /** Create a project */
  'v1-create-a-project': {
    requestBody: {
      content: {
        'application/json': components['schemas']['V1CreateProjectBody']
      }
    }
    responses: {
      201: {
        content: {
          'application/json': components['schemas']['V1ProjectResponse']
        }
      }
    }
  }
  /** Gets a specific project that belongs to the authenticated user */
  'v1-get-project': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project */
      500: {
        content: never
      }
    }
  }
  /** Deletes the given project */
  'v1-delete-a-project': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Get project api keys */
  'v1-get-project-api-keys': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /** [Alpha] Creates a new API key for the project */
  ApiKeysController_createApiKey: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApiKeyBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** [Alpha] Deletes an API key for the project */
  ApiKeysController_deleteApiKey: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** [Alpha] Updates an API key for the project */
  ApiKeysController_updateApiKey: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateApiKeyBody']
      }
    }
    responses: {
      200: {
        content: never
      }
    }
  }
  /**
   * List all database branches
   * @description Returns all database branches of the specified project.
   */
  'v1-list-all-branches': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve database branches */
      500: {
        content: never
      }
    }
  }
  /**
   * Create a database branch
   * @description Creates a database branch from the specified project.
   */
  'v1-create-a-branch': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBranchBody']
      }
    }
    responses: {
      /** @description Failed to create database branch */
      500: {
        content: never
      }
    }
  }
  /**
   * Disables preview branching
   * @description Disables preview branching for the specified project
   */
  'v1-disable-preview-branching': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to disable preview branching */
      500: {
        content: never
      }
    }
  }
  /** Gets project's auth config */
  'v1-get-auth-service-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's auth config */
      500: {
        content: never
      }
    }
  }
  /** Updates a project's auth config */
  'v1-update-auth-service-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAuthConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's auth config */
      500: {
        content: never
      }
    }
  }
  /** Lists all SSO providers */
  'v1-list-all-sso-provider': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description SAML 2.0 support is not enabled for this project */
      404: {
        content: never
      }
    }
  }
  /** Creates a new SSO provider */
  'v1-create-a-sso-provider': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProviderBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description SAML 2.0 support is not enabled for this project */
      404: {
        content: never
      }
    }
  }
  /** Gets a SSO provider by its UUID */
  'v1-get-a-sso-provider': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** Updates a SSO provider by its UUID */
  'v1-update-a-sso-provider': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProviderBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** Removes a SSO provider by its UUID */
  'v1-delete-a-sso-provider': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Either SAML 2.0 was not enabled for this project, or the provider does not exist */
      404: {
        content: never
      }
    }
  }
  /** [Alpha] Lists all third-party auth integrations */
  ThirdPartyAuthController_listTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Creates a new third-party auth integration */
  ThirdPartyAuthController_createTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateThirdPartyAuthBody']
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** [Alpha] Get a third-party integration */
  ThirdPartyAuthController_getTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** [Alpha] Removes a third-party auth integration */
  ThirdPartyAuthController_deleteTPAForProject: {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
    }
  }
  /** Get project's pgbouncer config */
  'v1-get-project-pgbouncer-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to retrieve project's pgbouncer config */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets project's custom hostname config */
  'v1-get-hostname-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's custom hostname config */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Deletes a project's custom hostname configuration */
  'v1-Delete hostname config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Activates a custom hostname for a project. */
  'v1-activate-custom-hostname': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to activate project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Updates project's custom hostname configuration */
  'v1-update-hostname-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCustomHostnameBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Attempts to verify the DNS configuration for project's custom hostname configuration */
  'v1-verify-dns-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to verify project custom hostname configuration */
      500: {
        content: never
      }
    }
  }
  /** Lists all backups */
  'v1-list-all-backups': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get backups */
      500: {
        content: never
      }
    }
  }
  /** Restores a PITR backup for a database */
  'v1-restore-pitr-backup': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['V1RestorePitrBody']
      }
    }
    responses: {
      201: {
        content: never
      }
    }
  }
  /** [Beta] Run sql query */
  'v1-run-a-query': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['V1RunQueryBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to run sql query */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Enables Database Webhooks on the project */
  'v1-enable-database-webhook': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to enable Database Webhooks on the project */
      500: {
        content: never
      }
    }
  }
  /**
   * Retrieve a function
   * @description Retrieves a function with the specified slug and project.
   */
  'v1-get-a-function': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve function with given slug */
      500: {
        content: never
      }
    }
  }
  /**
   * Retrieve a function body
   * @description Retrieves a function body for the specified slug and project.
   */
  'v1-get-a-function-body': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
        /** @description Function slug */
        function_slug: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve function body with given slug */
      500: {
        content: never
      }
    }
  }
  /** Gets project's service health status */
  'v1-get-services-health': {
    parameters: {
      query: {
        timeout_ms: number
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['V1ServiceHealthResponse'][]
        }
      }
      /** @description Failed to retrieve project's service health status */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Remove network bans. */
  'v1-delete-network-bans': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveNetworkBanRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to remove network bans. */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets project's network bans */
  'v1-list-all-network-bans': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's network bans */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets project's network restrictions */
  'v1-get-network-restrictions': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's network restrictions */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Updates project's network restrictions */
  'v1-update-network-restrictions': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NetworkRestrictionsRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project network restrictions */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets project's pgsodium config */
  'v1-get-pgsodium-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's pgsodium config */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible. */
  'v1-update-pgsodium-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePgsodiumConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's pgsodium config */
      500: {
        content: never
      }
    }
  }
  /** Gets project's postgrest config */
  'v1-get-postgrest-service-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** Updates project's postgrest config */
  'v1-update-postgrest-service-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgrestConfigBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's postgrest config */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Remove a read replica */
  'v1-remove-a-read-replica': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RemoveReadReplicaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to remove read replica */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Set up a read replica */
  'v1-setup-a-read-replica': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SetUpReadReplicaBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to set up read replica */
      500: {
        content: never
      }
    }
  }
  /** Returns project's readonly mode status */
  'v1-get-readonly-mode-status': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to get project readonly mode status */
      500: {
        content: never
      }
    }
  }
  /** Disables project's readonly mode for the next 15 minutes */
  'v1-disable-readonly-mode-temporarily': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      /** @description Failed to disable project's readonly mode */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Get project's SSL enforcement configuration. */
  'v1-get-ssl-enforcement-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project's SSL enforcement config */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Update project's SSL enforcement configuration. */
  'v1-update-ssl-enforcement-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SslEnforcementRequest']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to update project's SSL enforcement configuration. */
      500: {
        content: never
      }
    }
  }
  /** Lists all buckets */
  'v1-list-all-buckets': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get list of buckets */
      500: {
        content: never
      }
    }
  }
  /**
   * Generate TypeScript types
   * @description Returns the TypeScript types of your schema for use with supabase-js.
   */
  'v1-generate-typescript-types': {
    parameters: {
      query?: {
        included_schemas?: string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to generate TypeScript types */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Upgrades the project's Postgres version */
  'v1-upgrade-postgres-version': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpgradeDatabaseBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to initiate project upgrade */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Returns the project's eligibility for upgrades */
  'v1-get-postgres-upgrade-eligibility': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to determine project upgrade eligibility */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets the latest status of the project's upgrade */
  'v1-get-postgres-upgrade-status': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to retrieve project upgrade status */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Gets current vanity subdomain config */
  'v1-get-vanity-subdomain-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to get project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Deletes a project's vanity subdomain configuration */
  'v1-deactivate-vanity-subdomain-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to delete project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Activates a vanity subdomain for a project. */
  'v1-activate-vanity-subdomain-config': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VanitySubdomainBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to activate project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** [Beta] Checks vanity subdomain availability */
  'v1-check-vanity-subdomain-availability': {
    parameters: {
      path: {
        /** @description Project ref */
        ref: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VanitySubdomainBody']
      }
    }
    responses: {
      403: {
        content: never
      }
      /** @description Failed to check project vanity subdomain configuration */
      500: {
        content: never
      }
    }
  }
  /** Lists SQL snippets for the logged in user */
  'v1-list-all-snippets': {
    responses: {
      /** @description Failed to list user's SQL snippets */
      500: {
        content: never
      }
    }
  }
  /** Gets a specific SQL snippet */
  'v1-get-a-snippet': {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      /** @description Failed to retrieve SQL snippet */
      500: {
        content: never
      }
    }
  }
}
